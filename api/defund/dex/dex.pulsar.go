// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package dex

import (
	_ "cosmossdk.io/api/amino"
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	_ "cosmossdk.io/api/cosmos/msg/v1"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_Pair                  protoreflect.MessageDescriptor
	fd_Pair_id               protoreflect.FieldDescriptor
	fd_Pair_base_coin_denom  protoreflect.FieldDescriptor
	fd_Pair_quote_coin_denom protoreflect.FieldDescriptor
	fd_Pair_escrow_address   protoreflect.FieldDescriptor
	fd_Pair_last_order_id    protoreflect.FieldDescriptor
	fd_Pair_last_price       protoreflect.FieldDescriptor
	fd_Pair_current_batch_id protoreflect.FieldDescriptor
)

func init() {
	file_defund_dex_dex_proto_init()
	md_Pair = File_defund_dex_dex_proto.Messages().ByName("Pair")
	fd_Pair_id = md_Pair.Fields().ByName("id")
	fd_Pair_base_coin_denom = md_Pair.Fields().ByName("base_coin_denom")
	fd_Pair_quote_coin_denom = md_Pair.Fields().ByName("quote_coin_denom")
	fd_Pair_escrow_address = md_Pair.Fields().ByName("escrow_address")
	fd_Pair_last_order_id = md_Pair.Fields().ByName("last_order_id")
	fd_Pair_last_price = md_Pair.Fields().ByName("last_price")
	fd_Pair_current_batch_id = md_Pair.Fields().ByName("current_batch_id")
}

var _ protoreflect.Message = (*fastReflection_Pair)(nil)

type fastReflection_Pair Pair

func (x *Pair) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Pair)(x)
}

func (x *Pair) slowProtoReflect() protoreflect.Message {
	mi := &file_defund_dex_dex_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Pair_messageType fastReflection_Pair_messageType
var _ protoreflect.MessageType = fastReflection_Pair_messageType{}

type fastReflection_Pair_messageType struct{}

func (x fastReflection_Pair_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Pair)(nil)
}
func (x fastReflection_Pair_messageType) New() protoreflect.Message {
	return new(fastReflection_Pair)
}
func (x fastReflection_Pair_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Pair
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Pair) Descriptor() protoreflect.MessageDescriptor {
	return md_Pair
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Pair) Type() protoreflect.MessageType {
	return _fastReflection_Pair_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Pair) New() protoreflect.Message {
	return new(fastReflection_Pair)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Pair) Interface() protoreflect.ProtoMessage {
	return (*Pair)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Pair) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_Pair_id, value) {
			return
		}
	}
	if x.BaseCoinDenom != "" {
		value := protoreflect.ValueOfString(x.BaseCoinDenom)
		if !f(fd_Pair_base_coin_denom, value) {
			return
		}
	}
	if x.QuoteCoinDenom != "" {
		value := protoreflect.ValueOfString(x.QuoteCoinDenom)
		if !f(fd_Pair_quote_coin_denom, value) {
			return
		}
	}
	if x.EscrowAddress != "" {
		value := protoreflect.ValueOfString(x.EscrowAddress)
		if !f(fd_Pair_escrow_address, value) {
			return
		}
	}
	if x.LastOrderId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LastOrderId)
		if !f(fd_Pair_last_order_id, value) {
			return
		}
	}
	if x.LastPrice != "" {
		value := protoreflect.ValueOfString(x.LastPrice)
		if !f(fd_Pair_last_price, value) {
			return
		}
	}
	if x.CurrentBatchId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CurrentBatchId)
		if !f(fd_Pair_current_batch_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Pair) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "defund.dex.Pair.id":
		return x.Id != uint64(0)
	case "defund.dex.Pair.base_coin_denom":
		return x.BaseCoinDenom != ""
	case "defund.dex.Pair.quote_coin_denom":
		return x.QuoteCoinDenom != ""
	case "defund.dex.Pair.escrow_address":
		return x.EscrowAddress != ""
	case "defund.dex.Pair.last_order_id":
		return x.LastOrderId != uint64(0)
	case "defund.dex.Pair.last_price":
		return x.LastPrice != ""
	case "defund.dex.Pair.current_batch_id":
		return x.CurrentBatchId != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.Pair"))
		}
		panic(fmt.Errorf("message defund.dex.Pair does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Pair) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "defund.dex.Pair.id":
		x.Id = uint64(0)
	case "defund.dex.Pair.base_coin_denom":
		x.BaseCoinDenom = ""
	case "defund.dex.Pair.quote_coin_denom":
		x.QuoteCoinDenom = ""
	case "defund.dex.Pair.escrow_address":
		x.EscrowAddress = ""
	case "defund.dex.Pair.last_order_id":
		x.LastOrderId = uint64(0)
	case "defund.dex.Pair.last_price":
		x.LastPrice = ""
	case "defund.dex.Pair.current_batch_id":
		x.CurrentBatchId = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.Pair"))
		}
		panic(fmt.Errorf("message defund.dex.Pair does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Pair) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "defund.dex.Pair.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "defund.dex.Pair.base_coin_denom":
		value := x.BaseCoinDenom
		return protoreflect.ValueOfString(value)
	case "defund.dex.Pair.quote_coin_denom":
		value := x.QuoteCoinDenom
		return protoreflect.ValueOfString(value)
	case "defund.dex.Pair.escrow_address":
		value := x.EscrowAddress
		return protoreflect.ValueOfString(value)
	case "defund.dex.Pair.last_order_id":
		value := x.LastOrderId
		return protoreflect.ValueOfUint64(value)
	case "defund.dex.Pair.last_price":
		value := x.LastPrice
		return protoreflect.ValueOfString(value)
	case "defund.dex.Pair.current_batch_id":
		value := x.CurrentBatchId
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.Pair"))
		}
		panic(fmt.Errorf("message defund.dex.Pair does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Pair) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "defund.dex.Pair.id":
		x.Id = value.Uint()
	case "defund.dex.Pair.base_coin_denom":
		x.BaseCoinDenom = value.Interface().(string)
	case "defund.dex.Pair.quote_coin_denom":
		x.QuoteCoinDenom = value.Interface().(string)
	case "defund.dex.Pair.escrow_address":
		x.EscrowAddress = value.Interface().(string)
	case "defund.dex.Pair.last_order_id":
		x.LastOrderId = value.Uint()
	case "defund.dex.Pair.last_price":
		x.LastPrice = value.Interface().(string)
	case "defund.dex.Pair.current_batch_id":
		x.CurrentBatchId = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.Pair"))
		}
		panic(fmt.Errorf("message defund.dex.Pair does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Pair) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "defund.dex.Pair.id":
		panic(fmt.Errorf("field id of message defund.dex.Pair is not mutable"))
	case "defund.dex.Pair.base_coin_denom":
		panic(fmt.Errorf("field base_coin_denom of message defund.dex.Pair is not mutable"))
	case "defund.dex.Pair.quote_coin_denom":
		panic(fmt.Errorf("field quote_coin_denom of message defund.dex.Pair is not mutable"))
	case "defund.dex.Pair.escrow_address":
		panic(fmt.Errorf("field escrow_address of message defund.dex.Pair is not mutable"))
	case "defund.dex.Pair.last_order_id":
		panic(fmt.Errorf("field last_order_id of message defund.dex.Pair is not mutable"))
	case "defund.dex.Pair.last_price":
		panic(fmt.Errorf("field last_price of message defund.dex.Pair is not mutable"))
	case "defund.dex.Pair.current_batch_id":
		panic(fmt.Errorf("field current_batch_id of message defund.dex.Pair is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.Pair"))
		}
		panic(fmt.Errorf("message defund.dex.Pair does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Pair) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "defund.dex.Pair.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "defund.dex.Pair.base_coin_denom":
		return protoreflect.ValueOfString("")
	case "defund.dex.Pair.quote_coin_denom":
		return protoreflect.ValueOfString("")
	case "defund.dex.Pair.escrow_address":
		return protoreflect.ValueOfString("")
	case "defund.dex.Pair.last_order_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "defund.dex.Pair.last_price":
		return protoreflect.ValueOfString("")
	case "defund.dex.Pair.current_batch_id":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.Pair"))
		}
		panic(fmt.Errorf("message defund.dex.Pair does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Pair) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in defund.dex.Pair", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Pair) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Pair) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Pair) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Pair) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Pair)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.BaseCoinDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.QuoteCoinDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.EscrowAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.LastOrderId != 0 {
			n += 1 + runtime.Sov(uint64(x.LastOrderId))
		}
		l = len(x.LastPrice)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CurrentBatchId != 0 {
			n += 1 + runtime.Sov(uint64(x.CurrentBatchId))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Pair)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.CurrentBatchId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CurrentBatchId))
			i--
			dAtA[i] = 0x38
		}
		if len(x.LastPrice) > 0 {
			i -= len(x.LastPrice)
			copy(dAtA[i:], x.LastPrice)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LastPrice)))
			i--
			dAtA[i] = 0x32
		}
		if x.LastOrderId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastOrderId))
			i--
			dAtA[i] = 0x28
		}
		if len(x.EscrowAddress) > 0 {
			i -= len(x.EscrowAddress)
			copy(dAtA[i:], x.EscrowAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EscrowAddress)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.QuoteCoinDenom) > 0 {
			i -= len(x.QuoteCoinDenom)
			copy(dAtA[i:], x.QuoteCoinDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.QuoteCoinDenom)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.BaseCoinDenom) > 0 {
			i -= len(x.BaseCoinDenom)
			copy(dAtA[i:], x.BaseCoinDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BaseCoinDenom)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Pair)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Pair: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Pair: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BaseCoinDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BaseCoinDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field QuoteCoinDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.QuoteCoinDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EscrowAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EscrowAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastOrderId", wireType)
				}
				x.LastOrderId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastOrderId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastPrice", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LastPrice = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentBatchId", wireType)
				}
				x.CurrentBatchId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CurrentBatchId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Pool                          protoreflect.MessageDescriptor
	fd_Pool_type                     protoreflect.FieldDescriptor
	fd_Pool_id                       protoreflect.FieldDescriptor
	fd_Pool_pair_id                  protoreflect.FieldDescriptor
	fd_Pool_creator                  protoreflect.FieldDescriptor
	fd_Pool_reserve_address          protoreflect.FieldDescriptor
	fd_Pool_pool_coin_denom          protoreflect.FieldDescriptor
	fd_Pool_min_price                protoreflect.FieldDescriptor
	fd_Pool_max_price                protoreflect.FieldDescriptor
	fd_Pool_last_deposit_request_id  protoreflect.FieldDescriptor
	fd_Pool_last_withdraw_request_id protoreflect.FieldDescriptor
	fd_Pool_disabled                 protoreflect.FieldDescriptor
)

func init() {
	file_defund_dex_dex_proto_init()
	md_Pool = File_defund_dex_dex_proto.Messages().ByName("Pool")
	fd_Pool_type = md_Pool.Fields().ByName("type")
	fd_Pool_id = md_Pool.Fields().ByName("id")
	fd_Pool_pair_id = md_Pool.Fields().ByName("pair_id")
	fd_Pool_creator = md_Pool.Fields().ByName("creator")
	fd_Pool_reserve_address = md_Pool.Fields().ByName("reserve_address")
	fd_Pool_pool_coin_denom = md_Pool.Fields().ByName("pool_coin_denom")
	fd_Pool_min_price = md_Pool.Fields().ByName("min_price")
	fd_Pool_max_price = md_Pool.Fields().ByName("max_price")
	fd_Pool_last_deposit_request_id = md_Pool.Fields().ByName("last_deposit_request_id")
	fd_Pool_last_withdraw_request_id = md_Pool.Fields().ByName("last_withdraw_request_id")
	fd_Pool_disabled = md_Pool.Fields().ByName("disabled")
}

var _ protoreflect.Message = (*fastReflection_Pool)(nil)

type fastReflection_Pool Pool

func (x *Pool) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Pool)(x)
}

func (x *Pool) slowProtoReflect() protoreflect.Message {
	mi := &file_defund_dex_dex_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Pool_messageType fastReflection_Pool_messageType
var _ protoreflect.MessageType = fastReflection_Pool_messageType{}

type fastReflection_Pool_messageType struct{}

func (x fastReflection_Pool_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Pool)(nil)
}
func (x fastReflection_Pool_messageType) New() protoreflect.Message {
	return new(fastReflection_Pool)
}
func (x fastReflection_Pool_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Pool
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Pool) Descriptor() protoreflect.MessageDescriptor {
	return md_Pool
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Pool) Type() protoreflect.MessageType {
	return _fastReflection_Pool_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Pool) New() protoreflect.Message {
	return new(fastReflection_Pool)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Pool) Interface() protoreflect.ProtoMessage {
	return (*Pool)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Pool) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Type_ != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Type_))
		if !f(fd_Pool_type, value) {
			return
		}
	}
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_Pool_id, value) {
			return
		}
	}
	if x.PairId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PairId)
		if !f(fd_Pool_pair_id, value) {
			return
		}
	}
	if x.Creator != "" {
		value := protoreflect.ValueOfString(x.Creator)
		if !f(fd_Pool_creator, value) {
			return
		}
	}
	if x.ReserveAddress != "" {
		value := protoreflect.ValueOfString(x.ReserveAddress)
		if !f(fd_Pool_reserve_address, value) {
			return
		}
	}
	if x.PoolCoinDenom != "" {
		value := protoreflect.ValueOfString(x.PoolCoinDenom)
		if !f(fd_Pool_pool_coin_denom, value) {
			return
		}
	}
	if x.MinPrice != "" {
		value := protoreflect.ValueOfString(x.MinPrice)
		if !f(fd_Pool_min_price, value) {
			return
		}
	}
	if x.MaxPrice != "" {
		value := protoreflect.ValueOfString(x.MaxPrice)
		if !f(fd_Pool_max_price, value) {
			return
		}
	}
	if x.LastDepositRequestId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LastDepositRequestId)
		if !f(fd_Pool_last_deposit_request_id, value) {
			return
		}
	}
	if x.LastWithdrawRequestId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LastWithdrawRequestId)
		if !f(fd_Pool_last_withdraw_request_id, value) {
			return
		}
	}
	if x.Disabled != false {
		value := protoreflect.ValueOfBool(x.Disabled)
		if !f(fd_Pool_disabled, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Pool) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "defund.dex.Pool.type":
		return x.Type_ != 0
	case "defund.dex.Pool.id":
		return x.Id != uint64(0)
	case "defund.dex.Pool.pair_id":
		return x.PairId != uint64(0)
	case "defund.dex.Pool.creator":
		return x.Creator != ""
	case "defund.dex.Pool.reserve_address":
		return x.ReserveAddress != ""
	case "defund.dex.Pool.pool_coin_denom":
		return x.PoolCoinDenom != ""
	case "defund.dex.Pool.min_price":
		return x.MinPrice != ""
	case "defund.dex.Pool.max_price":
		return x.MaxPrice != ""
	case "defund.dex.Pool.last_deposit_request_id":
		return x.LastDepositRequestId != uint64(0)
	case "defund.dex.Pool.last_withdraw_request_id":
		return x.LastWithdrawRequestId != uint64(0)
	case "defund.dex.Pool.disabled":
		return x.Disabled != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.Pool"))
		}
		panic(fmt.Errorf("message defund.dex.Pool does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Pool) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "defund.dex.Pool.type":
		x.Type_ = 0
	case "defund.dex.Pool.id":
		x.Id = uint64(0)
	case "defund.dex.Pool.pair_id":
		x.PairId = uint64(0)
	case "defund.dex.Pool.creator":
		x.Creator = ""
	case "defund.dex.Pool.reserve_address":
		x.ReserveAddress = ""
	case "defund.dex.Pool.pool_coin_denom":
		x.PoolCoinDenom = ""
	case "defund.dex.Pool.min_price":
		x.MinPrice = ""
	case "defund.dex.Pool.max_price":
		x.MaxPrice = ""
	case "defund.dex.Pool.last_deposit_request_id":
		x.LastDepositRequestId = uint64(0)
	case "defund.dex.Pool.last_withdraw_request_id":
		x.LastWithdrawRequestId = uint64(0)
	case "defund.dex.Pool.disabled":
		x.Disabled = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.Pool"))
		}
		panic(fmt.Errorf("message defund.dex.Pool does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Pool) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "defund.dex.Pool.type":
		value := x.Type_
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "defund.dex.Pool.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "defund.dex.Pool.pair_id":
		value := x.PairId
		return protoreflect.ValueOfUint64(value)
	case "defund.dex.Pool.creator":
		value := x.Creator
		return protoreflect.ValueOfString(value)
	case "defund.dex.Pool.reserve_address":
		value := x.ReserveAddress
		return protoreflect.ValueOfString(value)
	case "defund.dex.Pool.pool_coin_denom":
		value := x.PoolCoinDenom
		return protoreflect.ValueOfString(value)
	case "defund.dex.Pool.min_price":
		value := x.MinPrice
		return protoreflect.ValueOfString(value)
	case "defund.dex.Pool.max_price":
		value := x.MaxPrice
		return protoreflect.ValueOfString(value)
	case "defund.dex.Pool.last_deposit_request_id":
		value := x.LastDepositRequestId
		return protoreflect.ValueOfUint64(value)
	case "defund.dex.Pool.last_withdraw_request_id":
		value := x.LastWithdrawRequestId
		return protoreflect.ValueOfUint64(value)
	case "defund.dex.Pool.disabled":
		value := x.Disabled
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.Pool"))
		}
		panic(fmt.Errorf("message defund.dex.Pool does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Pool) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "defund.dex.Pool.type":
		x.Type_ = (PoolType)(value.Enum())
	case "defund.dex.Pool.id":
		x.Id = value.Uint()
	case "defund.dex.Pool.pair_id":
		x.PairId = value.Uint()
	case "defund.dex.Pool.creator":
		x.Creator = value.Interface().(string)
	case "defund.dex.Pool.reserve_address":
		x.ReserveAddress = value.Interface().(string)
	case "defund.dex.Pool.pool_coin_denom":
		x.PoolCoinDenom = value.Interface().(string)
	case "defund.dex.Pool.min_price":
		x.MinPrice = value.Interface().(string)
	case "defund.dex.Pool.max_price":
		x.MaxPrice = value.Interface().(string)
	case "defund.dex.Pool.last_deposit_request_id":
		x.LastDepositRequestId = value.Uint()
	case "defund.dex.Pool.last_withdraw_request_id":
		x.LastWithdrawRequestId = value.Uint()
	case "defund.dex.Pool.disabled":
		x.Disabled = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.Pool"))
		}
		panic(fmt.Errorf("message defund.dex.Pool does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Pool) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "defund.dex.Pool.type":
		panic(fmt.Errorf("field type of message defund.dex.Pool is not mutable"))
	case "defund.dex.Pool.id":
		panic(fmt.Errorf("field id of message defund.dex.Pool is not mutable"))
	case "defund.dex.Pool.pair_id":
		panic(fmt.Errorf("field pair_id of message defund.dex.Pool is not mutable"))
	case "defund.dex.Pool.creator":
		panic(fmt.Errorf("field creator of message defund.dex.Pool is not mutable"))
	case "defund.dex.Pool.reserve_address":
		panic(fmt.Errorf("field reserve_address of message defund.dex.Pool is not mutable"))
	case "defund.dex.Pool.pool_coin_denom":
		panic(fmt.Errorf("field pool_coin_denom of message defund.dex.Pool is not mutable"))
	case "defund.dex.Pool.min_price":
		panic(fmt.Errorf("field min_price of message defund.dex.Pool is not mutable"))
	case "defund.dex.Pool.max_price":
		panic(fmt.Errorf("field max_price of message defund.dex.Pool is not mutable"))
	case "defund.dex.Pool.last_deposit_request_id":
		panic(fmt.Errorf("field last_deposit_request_id of message defund.dex.Pool is not mutable"))
	case "defund.dex.Pool.last_withdraw_request_id":
		panic(fmt.Errorf("field last_withdraw_request_id of message defund.dex.Pool is not mutable"))
	case "defund.dex.Pool.disabled":
		panic(fmt.Errorf("field disabled of message defund.dex.Pool is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.Pool"))
		}
		panic(fmt.Errorf("message defund.dex.Pool does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Pool) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "defund.dex.Pool.type":
		return protoreflect.ValueOfEnum(0)
	case "defund.dex.Pool.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "defund.dex.Pool.pair_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "defund.dex.Pool.creator":
		return protoreflect.ValueOfString("")
	case "defund.dex.Pool.reserve_address":
		return protoreflect.ValueOfString("")
	case "defund.dex.Pool.pool_coin_denom":
		return protoreflect.ValueOfString("")
	case "defund.dex.Pool.min_price":
		return protoreflect.ValueOfString("")
	case "defund.dex.Pool.max_price":
		return protoreflect.ValueOfString("")
	case "defund.dex.Pool.last_deposit_request_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "defund.dex.Pool.last_withdraw_request_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "defund.dex.Pool.disabled":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.Pool"))
		}
		panic(fmt.Errorf("message defund.dex.Pool does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Pool) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in defund.dex.Pool", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Pool) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Pool) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Pool) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Pool) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Pool)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Type_ != 0 {
			n += 1 + runtime.Sov(uint64(x.Type_))
		}
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.PairId != 0 {
			n += 1 + runtime.Sov(uint64(x.PairId))
		}
		l = len(x.Creator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ReserveAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PoolCoinDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MinPrice)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MaxPrice)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.LastDepositRequestId != 0 {
			n += 1 + runtime.Sov(uint64(x.LastDepositRequestId))
		}
		if x.LastWithdrawRequestId != 0 {
			n += 1 + runtime.Sov(uint64(x.LastWithdrawRequestId))
		}
		if x.Disabled {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Pool)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Disabled {
			i--
			if x.Disabled {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x58
		}
		if x.LastWithdrawRequestId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastWithdrawRequestId))
			i--
			dAtA[i] = 0x50
		}
		if x.LastDepositRequestId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastDepositRequestId))
			i--
			dAtA[i] = 0x48
		}
		if len(x.MaxPrice) > 0 {
			i -= len(x.MaxPrice)
			copy(dAtA[i:], x.MaxPrice)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MaxPrice)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.MinPrice) > 0 {
			i -= len(x.MinPrice)
			copy(dAtA[i:], x.MinPrice)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MinPrice)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.PoolCoinDenom) > 0 {
			i -= len(x.PoolCoinDenom)
			copy(dAtA[i:], x.PoolCoinDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PoolCoinDenom)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.ReserveAddress) > 0 {
			i -= len(x.ReserveAddress)
			copy(dAtA[i:], x.ReserveAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ReserveAddress)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Creator) > 0 {
			i -= len(x.Creator)
			copy(dAtA[i:], x.Creator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Creator)))
			i--
			dAtA[i] = 0x22
		}
		if x.PairId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PairId))
			i--
			dAtA[i] = 0x18
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x10
		}
		if x.Type_ != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Type_))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Pool)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Pool: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Type_", wireType)
				}
				x.Type_ = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Type_ |= PoolType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
				}
				x.PairId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PairId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Creator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReserveAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ReserveAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolCoinDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PoolCoinDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinPrice", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MinPrice = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxPrice", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MaxPrice = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastDepositRequestId", wireType)
				}
				x.LastDepositRequestId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastDepositRequestId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastWithdrawRequestId", wireType)
				}
				x.LastWithdrawRequestId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastWithdrawRequestId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Disabled = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_DepositRequest_5_list)(nil)

type _DepositRequest_5_list struct {
	list *[]*v1beta1.Coin
}

func (x *_DepositRequest_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_DepositRequest_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_DepositRequest_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_DepositRequest_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_DepositRequest_5_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_DepositRequest_5_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_DepositRequest_5_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_DepositRequest_5_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_DepositRequest_6_list)(nil)

type _DepositRequest_6_list struct {
	list *[]*v1beta1.Coin
}

func (x *_DepositRequest_6_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_DepositRequest_6_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_DepositRequest_6_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_DepositRequest_6_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_DepositRequest_6_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_DepositRequest_6_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_DepositRequest_6_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_DepositRequest_6_list) IsValid() bool {
	return x.list != nil
}

var (
	md_DepositRequest                  protoreflect.MessageDescriptor
	fd_DepositRequest_id               protoreflect.FieldDescriptor
	fd_DepositRequest_pool_id          protoreflect.FieldDescriptor
	fd_DepositRequest_msg_height       protoreflect.FieldDescriptor
	fd_DepositRequest_depositor        protoreflect.FieldDescriptor
	fd_DepositRequest_deposit_coins    protoreflect.FieldDescriptor
	fd_DepositRequest_accepted_coins   protoreflect.FieldDescriptor
	fd_DepositRequest_minted_pool_coin protoreflect.FieldDescriptor
	fd_DepositRequest_status           protoreflect.FieldDescriptor
)

func init() {
	file_defund_dex_dex_proto_init()
	md_DepositRequest = File_defund_dex_dex_proto.Messages().ByName("DepositRequest")
	fd_DepositRequest_id = md_DepositRequest.Fields().ByName("id")
	fd_DepositRequest_pool_id = md_DepositRequest.Fields().ByName("pool_id")
	fd_DepositRequest_msg_height = md_DepositRequest.Fields().ByName("msg_height")
	fd_DepositRequest_depositor = md_DepositRequest.Fields().ByName("depositor")
	fd_DepositRequest_deposit_coins = md_DepositRequest.Fields().ByName("deposit_coins")
	fd_DepositRequest_accepted_coins = md_DepositRequest.Fields().ByName("accepted_coins")
	fd_DepositRequest_minted_pool_coin = md_DepositRequest.Fields().ByName("minted_pool_coin")
	fd_DepositRequest_status = md_DepositRequest.Fields().ByName("status")
}

var _ protoreflect.Message = (*fastReflection_DepositRequest)(nil)

type fastReflection_DepositRequest DepositRequest

func (x *DepositRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DepositRequest)(x)
}

func (x *DepositRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_defund_dex_dex_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DepositRequest_messageType fastReflection_DepositRequest_messageType
var _ protoreflect.MessageType = fastReflection_DepositRequest_messageType{}

type fastReflection_DepositRequest_messageType struct{}

func (x fastReflection_DepositRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DepositRequest)(nil)
}
func (x fastReflection_DepositRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_DepositRequest)
}
func (x fastReflection_DepositRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DepositRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DepositRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_DepositRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DepositRequest) Type() protoreflect.MessageType {
	return _fastReflection_DepositRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DepositRequest) New() protoreflect.Message {
	return new(fastReflection_DepositRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DepositRequest) Interface() protoreflect.ProtoMessage {
	return (*DepositRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DepositRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_DepositRequest_id, value) {
			return
		}
	}
	if x.PoolId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PoolId)
		if !f(fd_DepositRequest_pool_id, value) {
			return
		}
	}
	if x.MsgHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.MsgHeight)
		if !f(fd_DepositRequest_msg_height, value) {
			return
		}
	}
	if x.Depositor != "" {
		value := protoreflect.ValueOfString(x.Depositor)
		if !f(fd_DepositRequest_depositor, value) {
			return
		}
	}
	if len(x.DepositCoins) != 0 {
		value := protoreflect.ValueOfList(&_DepositRequest_5_list{list: &x.DepositCoins})
		if !f(fd_DepositRequest_deposit_coins, value) {
			return
		}
	}
	if len(x.AcceptedCoins) != 0 {
		value := protoreflect.ValueOfList(&_DepositRequest_6_list{list: &x.AcceptedCoins})
		if !f(fd_DepositRequest_accepted_coins, value) {
			return
		}
	}
	if x.MintedPoolCoin != nil {
		value := protoreflect.ValueOfMessage(x.MintedPoolCoin.ProtoReflect())
		if !f(fd_DepositRequest_minted_pool_coin, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_DepositRequest_status, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DepositRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "defund.dex.DepositRequest.id":
		return x.Id != uint64(0)
	case "defund.dex.DepositRequest.pool_id":
		return x.PoolId != uint64(0)
	case "defund.dex.DepositRequest.msg_height":
		return x.MsgHeight != int64(0)
	case "defund.dex.DepositRequest.depositor":
		return x.Depositor != ""
	case "defund.dex.DepositRequest.deposit_coins":
		return len(x.DepositCoins) != 0
	case "defund.dex.DepositRequest.accepted_coins":
		return len(x.AcceptedCoins) != 0
	case "defund.dex.DepositRequest.minted_pool_coin":
		return x.MintedPoolCoin != nil
	case "defund.dex.DepositRequest.status":
		return x.Status != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.DepositRequest"))
		}
		panic(fmt.Errorf("message defund.dex.DepositRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DepositRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "defund.dex.DepositRequest.id":
		x.Id = uint64(0)
	case "defund.dex.DepositRequest.pool_id":
		x.PoolId = uint64(0)
	case "defund.dex.DepositRequest.msg_height":
		x.MsgHeight = int64(0)
	case "defund.dex.DepositRequest.depositor":
		x.Depositor = ""
	case "defund.dex.DepositRequest.deposit_coins":
		x.DepositCoins = nil
	case "defund.dex.DepositRequest.accepted_coins":
		x.AcceptedCoins = nil
	case "defund.dex.DepositRequest.minted_pool_coin":
		x.MintedPoolCoin = nil
	case "defund.dex.DepositRequest.status":
		x.Status = 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.DepositRequest"))
		}
		panic(fmt.Errorf("message defund.dex.DepositRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DepositRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "defund.dex.DepositRequest.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "defund.dex.DepositRequest.pool_id":
		value := x.PoolId
		return protoreflect.ValueOfUint64(value)
	case "defund.dex.DepositRequest.msg_height":
		value := x.MsgHeight
		return protoreflect.ValueOfInt64(value)
	case "defund.dex.DepositRequest.depositor":
		value := x.Depositor
		return protoreflect.ValueOfString(value)
	case "defund.dex.DepositRequest.deposit_coins":
		if len(x.DepositCoins) == 0 {
			return protoreflect.ValueOfList(&_DepositRequest_5_list{})
		}
		listValue := &_DepositRequest_5_list{list: &x.DepositCoins}
		return protoreflect.ValueOfList(listValue)
	case "defund.dex.DepositRequest.accepted_coins":
		if len(x.AcceptedCoins) == 0 {
			return protoreflect.ValueOfList(&_DepositRequest_6_list{})
		}
		listValue := &_DepositRequest_6_list{list: &x.AcceptedCoins}
		return protoreflect.ValueOfList(listValue)
	case "defund.dex.DepositRequest.minted_pool_coin":
		value := x.MintedPoolCoin
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "defund.dex.DepositRequest.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.DepositRequest"))
		}
		panic(fmt.Errorf("message defund.dex.DepositRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DepositRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "defund.dex.DepositRequest.id":
		x.Id = value.Uint()
	case "defund.dex.DepositRequest.pool_id":
		x.PoolId = value.Uint()
	case "defund.dex.DepositRequest.msg_height":
		x.MsgHeight = value.Int()
	case "defund.dex.DepositRequest.depositor":
		x.Depositor = value.Interface().(string)
	case "defund.dex.DepositRequest.deposit_coins":
		lv := value.List()
		clv := lv.(*_DepositRequest_5_list)
		x.DepositCoins = *clv.list
	case "defund.dex.DepositRequest.accepted_coins":
		lv := value.List()
		clv := lv.(*_DepositRequest_6_list)
		x.AcceptedCoins = *clv.list
	case "defund.dex.DepositRequest.minted_pool_coin":
		x.MintedPoolCoin = value.Message().Interface().(*v1beta1.Coin)
	case "defund.dex.DepositRequest.status":
		x.Status = (RequestStatus)(value.Enum())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.DepositRequest"))
		}
		panic(fmt.Errorf("message defund.dex.DepositRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DepositRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "defund.dex.DepositRequest.deposit_coins":
		if x.DepositCoins == nil {
			x.DepositCoins = []*v1beta1.Coin{}
		}
		value := &_DepositRequest_5_list{list: &x.DepositCoins}
		return protoreflect.ValueOfList(value)
	case "defund.dex.DepositRequest.accepted_coins":
		if x.AcceptedCoins == nil {
			x.AcceptedCoins = []*v1beta1.Coin{}
		}
		value := &_DepositRequest_6_list{list: &x.AcceptedCoins}
		return protoreflect.ValueOfList(value)
	case "defund.dex.DepositRequest.minted_pool_coin":
		if x.MintedPoolCoin == nil {
			x.MintedPoolCoin = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.MintedPoolCoin.ProtoReflect())
	case "defund.dex.DepositRequest.id":
		panic(fmt.Errorf("field id of message defund.dex.DepositRequest is not mutable"))
	case "defund.dex.DepositRequest.pool_id":
		panic(fmt.Errorf("field pool_id of message defund.dex.DepositRequest is not mutable"))
	case "defund.dex.DepositRequest.msg_height":
		panic(fmt.Errorf("field msg_height of message defund.dex.DepositRequest is not mutable"))
	case "defund.dex.DepositRequest.depositor":
		panic(fmt.Errorf("field depositor of message defund.dex.DepositRequest is not mutable"))
	case "defund.dex.DepositRequest.status":
		panic(fmt.Errorf("field status of message defund.dex.DepositRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.DepositRequest"))
		}
		panic(fmt.Errorf("message defund.dex.DepositRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DepositRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "defund.dex.DepositRequest.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "defund.dex.DepositRequest.pool_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "defund.dex.DepositRequest.msg_height":
		return protoreflect.ValueOfInt64(int64(0))
	case "defund.dex.DepositRequest.depositor":
		return protoreflect.ValueOfString("")
	case "defund.dex.DepositRequest.deposit_coins":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_DepositRequest_5_list{list: &list})
	case "defund.dex.DepositRequest.accepted_coins":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_DepositRequest_6_list{list: &list})
	case "defund.dex.DepositRequest.minted_pool_coin":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "defund.dex.DepositRequest.status":
		return protoreflect.ValueOfEnum(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.DepositRequest"))
		}
		panic(fmt.Errorf("message defund.dex.DepositRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DepositRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in defund.dex.DepositRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DepositRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DepositRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DepositRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DepositRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DepositRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.PoolId != 0 {
			n += 1 + runtime.Sov(uint64(x.PoolId))
		}
		if x.MsgHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.MsgHeight))
		}
		l = len(x.Depositor)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.DepositCoins) > 0 {
			for _, e := range x.DepositCoins {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.AcceptedCoins) > 0 {
			for _, e := range x.AcceptedCoins {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.MintedPoolCoin != nil {
			l = options.Size(x.MintedPoolCoin)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DepositRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x40
		}
		if x.MintedPoolCoin != nil {
			encoded, err := options.Marshal(x.MintedPoolCoin)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.AcceptedCoins) > 0 {
			for iNdEx := len(x.AcceptedCoins) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.AcceptedCoins[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x32
			}
		}
		if len(x.DepositCoins) > 0 {
			for iNdEx := len(x.DepositCoins) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.DepositCoins[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2a
			}
		}
		if len(x.Depositor) > 0 {
			i -= len(x.Depositor)
			copy(dAtA[i:], x.Depositor)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Depositor)))
			i--
			dAtA[i] = 0x22
		}
		if x.MsgHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MsgHeight))
			i--
			dAtA[i] = 0x18
		}
		if x.PoolId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PoolId))
			i--
			dAtA[i] = 0x10
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DepositRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DepositRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
				}
				x.PoolId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PoolId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MsgHeight", wireType)
				}
				x.MsgHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MsgHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Depositor = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DepositCoins", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DepositCoins = append(x.DepositCoins, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.DepositCoins[len(x.DepositCoins)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AcceptedCoins", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AcceptedCoins = append(x.AcceptedCoins, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AcceptedCoins[len(x.AcceptedCoins)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MintedPoolCoin", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.MintedPoolCoin == nil {
					x.MintedPoolCoin = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.MintedPoolCoin); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= RequestStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_WithdrawRequest_6_list)(nil)

type _WithdrawRequest_6_list struct {
	list *[]*v1beta1.Coin
}

func (x *_WithdrawRequest_6_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_WithdrawRequest_6_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_WithdrawRequest_6_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_WithdrawRequest_6_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_WithdrawRequest_6_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_WithdrawRequest_6_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_WithdrawRequest_6_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_WithdrawRequest_6_list) IsValid() bool {
	return x.list != nil
}

var (
	md_WithdrawRequest                 protoreflect.MessageDescriptor
	fd_WithdrawRequest_id              protoreflect.FieldDescriptor
	fd_WithdrawRequest_pool_id         protoreflect.FieldDescriptor
	fd_WithdrawRequest_msg_height      protoreflect.FieldDescriptor
	fd_WithdrawRequest_withdrawer      protoreflect.FieldDescriptor
	fd_WithdrawRequest_pool_coin       protoreflect.FieldDescriptor
	fd_WithdrawRequest_withdrawn_coins protoreflect.FieldDescriptor
	fd_WithdrawRequest_status          protoreflect.FieldDescriptor
)

func init() {
	file_defund_dex_dex_proto_init()
	md_WithdrawRequest = File_defund_dex_dex_proto.Messages().ByName("WithdrawRequest")
	fd_WithdrawRequest_id = md_WithdrawRequest.Fields().ByName("id")
	fd_WithdrawRequest_pool_id = md_WithdrawRequest.Fields().ByName("pool_id")
	fd_WithdrawRequest_msg_height = md_WithdrawRequest.Fields().ByName("msg_height")
	fd_WithdrawRequest_withdrawer = md_WithdrawRequest.Fields().ByName("withdrawer")
	fd_WithdrawRequest_pool_coin = md_WithdrawRequest.Fields().ByName("pool_coin")
	fd_WithdrawRequest_withdrawn_coins = md_WithdrawRequest.Fields().ByName("withdrawn_coins")
	fd_WithdrawRequest_status = md_WithdrawRequest.Fields().ByName("status")
}

var _ protoreflect.Message = (*fastReflection_WithdrawRequest)(nil)

type fastReflection_WithdrawRequest WithdrawRequest

func (x *WithdrawRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_WithdrawRequest)(x)
}

func (x *WithdrawRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_defund_dex_dex_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_WithdrawRequest_messageType fastReflection_WithdrawRequest_messageType
var _ protoreflect.MessageType = fastReflection_WithdrawRequest_messageType{}

type fastReflection_WithdrawRequest_messageType struct{}

func (x fastReflection_WithdrawRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_WithdrawRequest)(nil)
}
func (x fastReflection_WithdrawRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_WithdrawRequest)
}
func (x fastReflection_WithdrawRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_WithdrawRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_WithdrawRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_WithdrawRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_WithdrawRequest) Type() protoreflect.MessageType {
	return _fastReflection_WithdrawRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_WithdrawRequest) New() protoreflect.Message {
	return new(fastReflection_WithdrawRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_WithdrawRequest) Interface() protoreflect.ProtoMessage {
	return (*WithdrawRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_WithdrawRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_WithdrawRequest_id, value) {
			return
		}
	}
	if x.PoolId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PoolId)
		if !f(fd_WithdrawRequest_pool_id, value) {
			return
		}
	}
	if x.MsgHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.MsgHeight)
		if !f(fd_WithdrawRequest_msg_height, value) {
			return
		}
	}
	if x.Withdrawer != "" {
		value := protoreflect.ValueOfString(x.Withdrawer)
		if !f(fd_WithdrawRequest_withdrawer, value) {
			return
		}
	}
	if x.PoolCoin != nil {
		value := protoreflect.ValueOfMessage(x.PoolCoin.ProtoReflect())
		if !f(fd_WithdrawRequest_pool_coin, value) {
			return
		}
	}
	if len(x.WithdrawnCoins) != 0 {
		value := protoreflect.ValueOfList(&_WithdrawRequest_6_list{list: &x.WithdrawnCoins})
		if !f(fd_WithdrawRequest_withdrawn_coins, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_WithdrawRequest_status, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_WithdrawRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "defund.dex.WithdrawRequest.id":
		return x.Id != uint64(0)
	case "defund.dex.WithdrawRequest.pool_id":
		return x.PoolId != uint64(0)
	case "defund.dex.WithdrawRequest.msg_height":
		return x.MsgHeight != int64(0)
	case "defund.dex.WithdrawRequest.withdrawer":
		return x.Withdrawer != ""
	case "defund.dex.WithdrawRequest.pool_coin":
		return x.PoolCoin != nil
	case "defund.dex.WithdrawRequest.withdrawn_coins":
		return len(x.WithdrawnCoins) != 0
	case "defund.dex.WithdrawRequest.status":
		return x.Status != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.WithdrawRequest"))
		}
		panic(fmt.Errorf("message defund.dex.WithdrawRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WithdrawRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "defund.dex.WithdrawRequest.id":
		x.Id = uint64(0)
	case "defund.dex.WithdrawRequest.pool_id":
		x.PoolId = uint64(0)
	case "defund.dex.WithdrawRequest.msg_height":
		x.MsgHeight = int64(0)
	case "defund.dex.WithdrawRequest.withdrawer":
		x.Withdrawer = ""
	case "defund.dex.WithdrawRequest.pool_coin":
		x.PoolCoin = nil
	case "defund.dex.WithdrawRequest.withdrawn_coins":
		x.WithdrawnCoins = nil
	case "defund.dex.WithdrawRequest.status":
		x.Status = 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.WithdrawRequest"))
		}
		panic(fmt.Errorf("message defund.dex.WithdrawRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_WithdrawRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "defund.dex.WithdrawRequest.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "defund.dex.WithdrawRequest.pool_id":
		value := x.PoolId
		return protoreflect.ValueOfUint64(value)
	case "defund.dex.WithdrawRequest.msg_height":
		value := x.MsgHeight
		return protoreflect.ValueOfInt64(value)
	case "defund.dex.WithdrawRequest.withdrawer":
		value := x.Withdrawer
		return protoreflect.ValueOfString(value)
	case "defund.dex.WithdrawRequest.pool_coin":
		value := x.PoolCoin
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "defund.dex.WithdrawRequest.withdrawn_coins":
		if len(x.WithdrawnCoins) == 0 {
			return protoreflect.ValueOfList(&_WithdrawRequest_6_list{})
		}
		listValue := &_WithdrawRequest_6_list{list: &x.WithdrawnCoins}
		return protoreflect.ValueOfList(listValue)
	case "defund.dex.WithdrawRequest.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.WithdrawRequest"))
		}
		panic(fmt.Errorf("message defund.dex.WithdrawRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WithdrawRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "defund.dex.WithdrawRequest.id":
		x.Id = value.Uint()
	case "defund.dex.WithdrawRequest.pool_id":
		x.PoolId = value.Uint()
	case "defund.dex.WithdrawRequest.msg_height":
		x.MsgHeight = value.Int()
	case "defund.dex.WithdrawRequest.withdrawer":
		x.Withdrawer = value.Interface().(string)
	case "defund.dex.WithdrawRequest.pool_coin":
		x.PoolCoin = value.Message().Interface().(*v1beta1.Coin)
	case "defund.dex.WithdrawRequest.withdrawn_coins":
		lv := value.List()
		clv := lv.(*_WithdrawRequest_6_list)
		x.WithdrawnCoins = *clv.list
	case "defund.dex.WithdrawRequest.status":
		x.Status = (RequestStatus)(value.Enum())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.WithdrawRequest"))
		}
		panic(fmt.Errorf("message defund.dex.WithdrawRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WithdrawRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "defund.dex.WithdrawRequest.pool_coin":
		if x.PoolCoin == nil {
			x.PoolCoin = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.PoolCoin.ProtoReflect())
	case "defund.dex.WithdrawRequest.withdrawn_coins":
		if x.WithdrawnCoins == nil {
			x.WithdrawnCoins = []*v1beta1.Coin{}
		}
		value := &_WithdrawRequest_6_list{list: &x.WithdrawnCoins}
		return protoreflect.ValueOfList(value)
	case "defund.dex.WithdrawRequest.id":
		panic(fmt.Errorf("field id of message defund.dex.WithdrawRequest is not mutable"))
	case "defund.dex.WithdrawRequest.pool_id":
		panic(fmt.Errorf("field pool_id of message defund.dex.WithdrawRequest is not mutable"))
	case "defund.dex.WithdrawRequest.msg_height":
		panic(fmt.Errorf("field msg_height of message defund.dex.WithdrawRequest is not mutable"))
	case "defund.dex.WithdrawRequest.withdrawer":
		panic(fmt.Errorf("field withdrawer of message defund.dex.WithdrawRequest is not mutable"))
	case "defund.dex.WithdrawRequest.status":
		panic(fmt.Errorf("field status of message defund.dex.WithdrawRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.WithdrawRequest"))
		}
		panic(fmt.Errorf("message defund.dex.WithdrawRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_WithdrawRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "defund.dex.WithdrawRequest.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "defund.dex.WithdrawRequest.pool_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "defund.dex.WithdrawRequest.msg_height":
		return protoreflect.ValueOfInt64(int64(0))
	case "defund.dex.WithdrawRequest.withdrawer":
		return protoreflect.ValueOfString("")
	case "defund.dex.WithdrawRequest.pool_coin":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "defund.dex.WithdrawRequest.withdrawn_coins":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_WithdrawRequest_6_list{list: &list})
	case "defund.dex.WithdrawRequest.status":
		return protoreflect.ValueOfEnum(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.WithdrawRequest"))
		}
		panic(fmt.Errorf("message defund.dex.WithdrawRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_WithdrawRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in defund.dex.WithdrawRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_WithdrawRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WithdrawRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_WithdrawRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_WithdrawRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*WithdrawRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.PoolId != 0 {
			n += 1 + runtime.Sov(uint64(x.PoolId))
		}
		if x.MsgHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.MsgHeight))
		}
		l = len(x.Withdrawer)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.PoolCoin != nil {
			l = options.Size(x.PoolCoin)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.WithdrawnCoins) > 0 {
			for _, e := range x.WithdrawnCoins {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*WithdrawRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x38
		}
		if len(x.WithdrawnCoins) > 0 {
			for iNdEx := len(x.WithdrawnCoins) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.WithdrawnCoins[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x32
			}
		}
		if x.PoolCoin != nil {
			encoded, err := options.Marshal(x.PoolCoin)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Withdrawer) > 0 {
			i -= len(x.Withdrawer)
			copy(dAtA[i:], x.Withdrawer)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Withdrawer)))
			i--
			dAtA[i] = 0x22
		}
		if x.MsgHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MsgHeight))
			i--
			dAtA[i] = 0x18
		}
		if x.PoolId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PoolId))
			i--
			dAtA[i] = 0x10
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*WithdrawRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: WithdrawRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: WithdrawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
				}
				x.PoolId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PoolId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MsgHeight", wireType)
				}
				x.MsgHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MsgHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Withdrawer", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Withdrawer = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolCoin", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.PoolCoin == nil {
					x.PoolCoin = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PoolCoin); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WithdrawnCoins", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.WithdrawnCoins = append(x.WithdrawnCoins, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.WithdrawnCoins[len(x.WithdrawnCoins)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= RequestStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Order                      protoreflect.MessageDescriptor
	fd_Order_type                 protoreflect.FieldDescriptor
	fd_Order_id                   protoreflect.FieldDescriptor
	fd_Order_pair_id              protoreflect.FieldDescriptor
	fd_Order_msg_height           protoreflect.FieldDescriptor
	fd_Order_orderer              protoreflect.FieldDescriptor
	fd_Order_direction            protoreflect.FieldDescriptor
	fd_Order_offer_coin           protoreflect.FieldDescriptor
	fd_Order_remaining_offer_coin protoreflect.FieldDescriptor
	fd_Order_received_coin        protoreflect.FieldDescriptor
	fd_Order_price                protoreflect.FieldDescriptor
	fd_Order_amount               protoreflect.FieldDescriptor
	fd_Order_open_amount          protoreflect.FieldDescriptor
	fd_Order_batch_id             protoreflect.FieldDescriptor
	fd_Order_expire_at            protoreflect.FieldDescriptor
	fd_Order_status               protoreflect.FieldDescriptor
)

func init() {
	file_defund_dex_dex_proto_init()
	md_Order = File_defund_dex_dex_proto.Messages().ByName("Order")
	fd_Order_type = md_Order.Fields().ByName("type")
	fd_Order_id = md_Order.Fields().ByName("id")
	fd_Order_pair_id = md_Order.Fields().ByName("pair_id")
	fd_Order_msg_height = md_Order.Fields().ByName("msg_height")
	fd_Order_orderer = md_Order.Fields().ByName("orderer")
	fd_Order_direction = md_Order.Fields().ByName("direction")
	fd_Order_offer_coin = md_Order.Fields().ByName("offer_coin")
	fd_Order_remaining_offer_coin = md_Order.Fields().ByName("remaining_offer_coin")
	fd_Order_received_coin = md_Order.Fields().ByName("received_coin")
	fd_Order_price = md_Order.Fields().ByName("price")
	fd_Order_amount = md_Order.Fields().ByName("amount")
	fd_Order_open_amount = md_Order.Fields().ByName("open_amount")
	fd_Order_batch_id = md_Order.Fields().ByName("batch_id")
	fd_Order_expire_at = md_Order.Fields().ByName("expire_at")
	fd_Order_status = md_Order.Fields().ByName("status")
}

var _ protoreflect.Message = (*fastReflection_Order)(nil)

type fastReflection_Order Order

func (x *Order) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Order)(x)
}

func (x *Order) slowProtoReflect() protoreflect.Message {
	mi := &file_defund_dex_dex_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Order_messageType fastReflection_Order_messageType
var _ protoreflect.MessageType = fastReflection_Order_messageType{}

type fastReflection_Order_messageType struct{}

func (x fastReflection_Order_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Order)(nil)
}
func (x fastReflection_Order_messageType) New() protoreflect.Message {
	return new(fastReflection_Order)
}
func (x fastReflection_Order_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Order
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Order) Descriptor() protoreflect.MessageDescriptor {
	return md_Order
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Order) Type() protoreflect.MessageType {
	return _fastReflection_Order_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Order) New() protoreflect.Message {
	return new(fastReflection_Order)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Order) Interface() protoreflect.ProtoMessage {
	return (*Order)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Order) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Type_ != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Type_))
		if !f(fd_Order_type, value) {
			return
		}
	}
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_Order_id, value) {
			return
		}
	}
	if x.PairId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PairId)
		if !f(fd_Order_pair_id, value) {
			return
		}
	}
	if x.MsgHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.MsgHeight)
		if !f(fd_Order_msg_height, value) {
			return
		}
	}
	if x.Orderer != "" {
		value := protoreflect.ValueOfString(x.Orderer)
		if !f(fd_Order_orderer, value) {
			return
		}
	}
	if x.Direction != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Direction))
		if !f(fd_Order_direction, value) {
			return
		}
	}
	if x.OfferCoin != nil {
		value := protoreflect.ValueOfMessage(x.OfferCoin.ProtoReflect())
		if !f(fd_Order_offer_coin, value) {
			return
		}
	}
	if x.RemainingOfferCoin != nil {
		value := protoreflect.ValueOfMessage(x.RemainingOfferCoin.ProtoReflect())
		if !f(fd_Order_remaining_offer_coin, value) {
			return
		}
	}
	if x.ReceivedCoin != nil {
		value := protoreflect.ValueOfMessage(x.ReceivedCoin.ProtoReflect())
		if !f(fd_Order_received_coin, value) {
			return
		}
	}
	if x.Price != "" {
		value := protoreflect.ValueOfString(x.Price)
		if !f(fd_Order_price, value) {
			return
		}
	}
	if x.Amount != "" {
		value := protoreflect.ValueOfString(x.Amount)
		if !f(fd_Order_amount, value) {
			return
		}
	}
	if x.OpenAmount != "" {
		value := protoreflect.ValueOfString(x.OpenAmount)
		if !f(fd_Order_open_amount, value) {
			return
		}
	}
	if x.BatchId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BatchId)
		if !f(fd_Order_batch_id, value) {
			return
		}
	}
	if x.ExpireAt != nil {
		value := protoreflect.ValueOfMessage(x.ExpireAt.ProtoReflect())
		if !f(fd_Order_expire_at, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_Order_status, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Order) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "defund.dex.Order.type":
		return x.Type_ != 0
	case "defund.dex.Order.id":
		return x.Id != uint64(0)
	case "defund.dex.Order.pair_id":
		return x.PairId != uint64(0)
	case "defund.dex.Order.msg_height":
		return x.MsgHeight != int64(0)
	case "defund.dex.Order.orderer":
		return x.Orderer != ""
	case "defund.dex.Order.direction":
		return x.Direction != 0
	case "defund.dex.Order.offer_coin":
		return x.OfferCoin != nil
	case "defund.dex.Order.remaining_offer_coin":
		return x.RemainingOfferCoin != nil
	case "defund.dex.Order.received_coin":
		return x.ReceivedCoin != nil
	case "defund.dex.Order.price":
		return x.Price != ""
	case "defund.dex.Order.amount":
		return x.Amount != ""
	case "defund.dex.Order.open_amount":
		return x.OpenAmount != ""
	case "defund.dex.Order.batch_id":
		return x.BatchId != uint64(0)
	case "defund.dex.Order.expire_at":
		return x.ExpireAt != nil
	case "defund.dex.Order.status":
		return x.Status != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.Order"))
		}
		panic(fmt.Errorf("message defund.dex.Order does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Order) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "defund.dex.Order.type":
		x.Type_ = 0
	case "defund.dex.Order.id":
		x.Id = uint64(0)
	case "defund.dex.Order.pair_id":
		x.PairId = uint64(0)
	case "defund.dex.Order.msg_height":
		x.MsgHeight = int64(0)
	case "defund.dex.Order.orderer":
		x.Orderer = ""
	case "defund.dex.Order.direction":
		x.Direction = 0
	case "defund.dex.Order.offer_coin":
		x.OfferCoin = nil
	case "defund.dex.Order.remaining_offer_coin":
		x.RemainingOfferCoin = nil
	case "defund.dex.Order.received_coin":
		x.ReceivedCoin = nil
	case "defund.dex.Order.price":
		x.Price = ""
	case "defund.dex.Order.amount":
		x.Amount = ""
	case "defund.dex.Order.open_amount":
		x.OpenAmount = ""
	case "defund.dex.Order.batch_id":
		x.BatchId = uint64(0)
	case "defund.dex.Order.expire_at":
		x.ExpireAt = nil
	case "defund.dex.Order.status":
		x.Status = 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.Order"))
		}
		panic(fmt.Errorf("message defund.dex.Order does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Order) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "defund.dex.Order.type":
		value := x.Type_
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "defund.dex.Order.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "defund.dex.Order.pair_id":
		value := x.PairId
		return protoreflect.ValueOfUint64(value)
	case "defund.dex.Order.msg_height":
		value := x.MsgHeight
		return protoreflect.ValueOfInt64(value)
	case "defund.dex.Order.orderer":
		value := x.Orderer
		return protoreflect.ValueOfString(value)
	case "defund.dex.Order.direction":
		value := x.Direction
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "defund.dex.Order.offer_coin":
		value := x.OfferCoin
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "defund.dex.Order.remaining_offer_coin":
		value := x.RemainingOfferCoin
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "defund.dex.Order.received_coin":
		value := x.ReceivedCoin
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "defund.dex.Order.price":
		value := x.Price
		return protoreflect.ValueOfString(value)
	case "defund.dex.Order.amount":
		value := x.Amount
		return protoreflect.ValueOfString(value)
	case "defund.dex.Order.open_amount":
		value := x.OpenAmount
		return protoreflect.ValueOfString(value)
	case "defund.dex.Order.batch_id":
		value := x.BatchId
		return protoreflect.ValueOfUint64(value)
	case "defund.dex.Order.expire_at":
		value := x.ExpireAt
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "defund.dex.Order.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.Order"))
		}
		panic(fmt.Errorf("message defund.dex.Order does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Order) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "defund.dex.Order.type":
		x.Type_ = (OrderType)(value.Enum())
	case "defund.dex.Order.id":
		x.Id = value.Uint()
	case "defund.dex.Order.pair_id":
		x.PairId = value.Uint()
	case "defund.dex.Order.msg_height":
		x.MsgHeight = value.Int()
	case "defund.dex.Order.orderer":
		x.Orderer = value.Interface().(string)
	case "defund.dex.Order.direction":
		x.Direction = (OrderDirection)(value.Enum())
	case "defund.dex.Order.offer_coin":
		x.OfferCoin = value.Message().Interface().(*v1beta1.Coin)
	case "defund.dex.Order.remaining_offer_coin":
		x.RemainingOfferCoin = value.Message().Interface().(*v1beta1.Coin)
	case "defund.dex.Order.received_coin":
		x.ReceivedCoin = value.Message().Interface().(*v1beta1.Coin)
	case "defund.dex.Order.price":
		x.Price = value.Interface().(string)
	case "defund.dex.Order.amount":
		x.Amount = value.Interface().(string)
	case "defund.dex.Order.open_amount":
		x.OpenAmount = value.Interface().(string)
	case "defund.dex.Order.batch_id":
		x.BatchId = value.Uint()
	case "defund.dex.Order.expire_at":
		x.ExpireAt = value.Message().Interface().(*timestamppb.Timestamp)
	case "defund.dex.Order.status":
		x.Status = (OrderStatus)(value.Enum())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.Order"))
		}
		panic(fmt.Errorf("message defund.dex.Order does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Order) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "defund.dex.Order.offer_coin":
		if x.OfferCoin == nil {
			x.OfferCoin = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.OfferCoin.ProtoReflect())
	case "defund.dex.Order.remaining_offer_coin":
		if x.RemainingOfferCoin == nil {
			x.RemainingOfferCoin = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.RemainingOfferCoin.ProtoReflect())
	case "defund.dex.Order.received_coin":
		if x.ReceivedCoin == nil {
			x.ReceivedCoin = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.ReceivedCoin.ProtoReflect())
	case "defund.dex.Order.expire_at":
		if x.ExpireAt == nil {
			x.ExpireAt = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.ExpireAt.ProtoReflect())
	case "defund.dex.Order.type":
		panic(fmt.Errorf("field type of message defund.dex.Order is not mutable"))
	case "defund.dex.Order.id":
		panic(fmt.Errorf("field id of message defund.dex.Order is not mutable"))
	case "defund.dex.Order.pair_id":
		panic(fmt.Errorf("field pair_id of message defund.dex.Order is not mutable"))
	case "defund.dex.Order.msg_height":
		panic(fmt.Errorf("field msg_height of message defund.dex.Order is not mutable"))
	case "defund.dex.Order.orderer":
		panic(fmt.Errorf("field orderer of message defund.dex.Order is not mutable"))
	case "defund.dex.Order.direction":
		panic(fmt.Errorf("field direction of message defund.dex.Order is not mutable"))
	case "defund.dex.Order.price":
		panic(fmt.Errorf("field price of message defund.dex.Order is not mutable"))
	case "defund.dex.Order.amount":
		panic(fmt.Errorf("field amount of message defund.dex.Order is not mutable"))
	case "defund.dex.Order.open_amount":
		panic(fmt.Errorf("field open_amount of message defund.dex.Order is not mutable"))
	case "defund.dex.Order.batch_id":
		panic(fmt.Errorf("field batch_id of message defund.dex.Order is not mutable"))
	case "defund.dex.Order.status":
		panic(fmt.Errorf("field status of message defund.dex.Order is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.Order"))
		}
		panic(fmt.Errorf("message defund.dex.Order does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Order) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "defund.dex.Order.type":
		return protoreflect.ValueOfEnum(0)
	case "defund.dex.Order.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "defund.dex.Order.pair_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "defund.dex.Order.msg_height":
		return protoreflect.ValueOfInt64(int64(0))
	case "defund.dex.Order.orderer":
		return protoreflect.ValueOfString("")
	case "defund.dex.Order.direction":
		return protoreflect.ValueOfEnum(0)
	case "defund.dex.Order.offer_coin":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "defund.dex.Order.remaining_offer_coin":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "defund.dex.Order.received_coin":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "defund.dex.Order.price":
		return protoreflect.ValueOfString("")
	case "defund.dex.Order.amount":
		return protoreflect.ValueOfString("")
	case "defund.dex.Order.open_amount":
		return protoreflect.ValueOfString("")
	case "defund.dex.Order.batch_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "defund.dex.Order.expire_at":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "defund.dex.Order.status":
		return protoreflect.ValueOfEnum(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.Order"))
		}
		panic(fmt.Errorf("message defund.dex.Order does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Order) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in defund.dex.Order", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Order) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Order) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Order) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Order) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Order)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Type_ != 0 {
			n += 1 + runtime.Sov(uint64(x.Type_))
		}
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.PairId != 0 {
			n += 1 + runtime.Sov(uint64(x.PairId))
		}
		if x.MsgHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.MsgHeight))
		}
		l = len(x.Orderer)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Direction != 0 {
			n += 1 + runtime.Sov(uint64(x.Direction))
		}
		if x.OfferCoin != nil {
			l = options.Size(x.OfferCoin)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.RemainingOfferCoin != nil {
			l = options.Size(x.RemainingOfferCoin)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ReceivedCoin != nil {
			l = options.Size(x.ReceivedCoin)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Price)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Amount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.OpenAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.BatchId != 0 {
			n += 1 + runtime.Sov(uint64(x.BatchId))
		}
		if x.ExpireAt != nil {
			l = options.Size(x.ExpireAt)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Order)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x78
		}
		if x.ExpireAt != nil {
			encoded, err := options.Marshal(x.ExpireAt)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x72
		}
		if x.BatchId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BatchId))
			i--
			dAtA[i] = 0x68
		}
		if len(x.OpenAmount) > 0 {
			i -= len(x.OpenAmount)
			copy(dAtA[i:], x.OpenAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.OpenAmount)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.Amount) > 0 {
			i -= len(x.Amount)
			copy(dAtA[i:], x.Amount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Amount)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.Price) > 0 {
			i -= len(x.Price)
			copy(dAtA[i:], x.Price)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Price)))
			i--
			dAtA[i] = 0x52
		}
		if x.ReceivedCoin != nil {
			encoded, err := options.Marshal(x.ReceivedCoin)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x4a
		}
		if x.RemainingOfferCoin != nil {
			encoded, err := options.Marshal(x.RemainingOfferCoin)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x42
		}
		if x.OfferCoin != nil {
			encoded, err := options.Marshal(x.OfferCoin)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		}
		if x.Direction != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Direction))
			i--
			dAtA[i] = 0x30
		}
		if len(x.Orderer) > 0 {
			i -= len(x.Orderer)
			copy(dAtA[i:], x.Orderer)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Orderer)))
			i--
			dAtA[i] = 0x2a
		}
		if x.MsgHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MsgHeight))
			i--
			dAtA[i] = 0x20
		}
		if x.PairId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PairId))
			i--
			dAtA[i] = 0x18
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x10
		}
		if x.Type_ != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Type_))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Order)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Order: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Order: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Type_", wireType)
				}
				x.Type_ = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Type_ |= OrderType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
				}
				x.PairId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PairId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MsgHeight", wireType)
				}
				x.MsgHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MsgHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Orderer", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Orderer = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
				}
				x.Direction = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Direction |= OrderDirection(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OfferCoin", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.OfferCoin == nil {
					x.OfferCoin = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.OfferCoin); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RemainingOfferCoin", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.RemainingOfferCoin == nil {
					x.RemainingOfferCoin = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.RemainingOfferCoin); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReceivedCoin", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ReceivedCoin == nil {
					x.ReceivedCoin = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ReceivedCoin); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Price = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Amount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OpenAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OpenAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BatchId", wireType)
				}
				x.BatchId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BatchId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExpireAt", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ExpireAt == nil {
					x.ExpireAt = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ExpireAt); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 15:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= OrderStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: defund/dex/dex.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PoolType enumerates pool types.
type PoolType int32

const (
	// POOL_TYPE_UNSPECIFIED specifies unknown pool type
	PoolType_POOL_TYPE_UNSPECIFIED PoolType = 0
	// POOL_TYPE_BASIC specifies the basic pool type
	PoolType_POOL_TYPE_BASIC PoolType = 1
	// POOL_TYPE_RANGED specifies the ranged pool type
	PoolType_POOL_TYPE_RANGED PoolType = 2
)

// Enum value maps for PoolType.
var (
	PoolType_name = map[int32]string{
		0: "POOL_TYPE_UNSPECIFIED",
		1: "POOL_TYPE_BASIC",
		2: "POOL_TYPE_RANGED",
	}
	PoolType_value = map[string]int32{
		"POOL_TYPE_UNSPECIFIED": 0,
		"POOL_TYPE_BASIC":       1,
		"POOL_TYPE_RANGED":      2,
	}
)

func (x PoolType) Enum() *PoolType {
	p := new(PoolType)
	*p = x
	return p
}

func (x PoolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PoolType) Descriptor() protoreflect.EnumDescriptor {
	return file_defund_dex_dex_proto_enumTypes[0].Descriptor()
}

func (PoolType) Type() protoreflect.EnumType {
	return &file_defund_dex_dex_proto_enumTypes[0]
}

func (x PoolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PoolType.Descriptor instead.
func (PoolType) EnumDescriptor() ([]byte, []int) {
	return file_defund_dex_dex_proto_rawDescGZIP(), []int{0}
}

// OrderType enumerates order types.
type OrderType int32

const (
	// ORDER_TYPE_UNSPECIFIED specifies unknown order type.
	OrderType_ORDER_TYPE_UNSPECIFIED OrderType = 0
	// ORDER_TYPE_LIMIT specifies limit order type.
	OrderType_ORDER_TYPE_LIMIT OrderType = 1
	// ORDER_TYPE_MARKET specifies market order type.
	OrderType_ORDER_TYPE_MARKET OrderType = 2
	// ORDER_TYPE_MM specifies MM(market making) order type.
	OrderType_ORDER_TYPE_MM OrderType = 3
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "ORDER_TYPE_UNSPECIFIED",
		1: "ORDER_TYPE_LIMIT",
		2: "ORDER_TYPE_MARKET",
		3: "ORDER_TYPE_MM",
	}
	OrderType_value = map[string]int32{
		"ORDER_TYPE_UNSPECIFIED": 0,
		"ORDER_TYPE_LIMIT":       1,
		"ORDER_TYPE_MARKET":      2,
		"ORDER_TYPE_MM":          3,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_defund_dex_dex_proto_enumTypes[1].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_defund_dex_dex_proto_enumTypes[1]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_defund_dex_dex_proto_rawDescGZIP(), []int{1}
}

// OrderDirection enumerates order directions.
type OrderDirection int32

const (
	// ORDER_DIRECTION_UNSPECIFIED specifies unknown order direction
	OrderDirection_ORDER_DIRECTION_UNSPECIFIED OrderDirection = 0
	// ORDER_DIRECTION_BUY specifies buy(swap quote coin to base coin) order direction
	OrderDirection_ORDER_DIRECTION_BUY OrderDirection = 1
	// ORDER_DIRECTION_SELL specifies sell(swap base coin to quote coin) order direction
	OrderDirection_ORDER_DIRECTION_SELL OrderDirection = 2
)

// Enum value maps for OrderDirection.
var (
	OrderDirection_name = map[int32]string{
		0: "ORDER_DIRECTION_UNSPECIFIED",
		1: "ORDER_DIRECTION_BUY",
		2: "ORDER_DIRECTION_SELL",
	}
	OrderDirection_value = map[string]int32{
		"ORDER_DIRECTION_UNSPECIFIED": 0,
		"ORDER_DIRECTION_BUY":         1,
		"ORDER_DIRECTION_SELL":        2,
	}
)

func (x OrderDirection) Enum() *OrderDirection {
	p := new(OrderDirection)
	*p = x
	return p
}

func (x OrderDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_defund_dex_dex_proto_enumTypes[2].Descriptor()
}

func (OrderDirection) Type() protoreflect.EnumType {
	return &file_defund_dex_dex_proto_enumTypes[2]
}

func (x OrderDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderDirection.Descriptor instead.
func (OrderDirection) EnumDescriptor() ([]byte, []int) {
	return file_defund_dex_dex_proto_rawDescGZIP(), []int{2}
}

// RequestStatus enumerates request statuses.
type RequestStatus int32

const (
	// REQUEST_STATUS_UNSPECIFIED specifies unknown request status
	RequestStatus_REQUEST_STATUS_UNSPECIFIED RequestStatus = 0
	// REQUEST_STATUS_NOT_EXECUTED indicates the request is not executed yet
	RequestStatus_REQUEST_STATUS_NOT_EXECUTED RequestStatus = 1
	// REQUEST_STATUS_SUCCEEDED indicates the request has been succeeded
	RequestStatus_REQUEST_STATUS_SUCCEEDED RequestStatus = 2
	// REQUEST_STATUS_FAILED indicates the request is failed
	RequestStatus_REQUEST_STATUS_FAILED RequestStatus = 3
)

// Enum value maps for RequestStatus.
var (
	RequestStatus_name = map[int32]string{
		0: "REQUEST_STATUS_UNSPECIFIED",
		1: "REQUEST_STATUS_NOT_EXECUTED",
		2: "REQUEST_STATUS_SUCCEEDED",
		3: "REQUEST_STATUS_FAILED",
	}
	RequestStatus_value = map[string]int32{
		"REQUEST_STATUS_UNSPECIFIED":  0,
		"REQUEST_STATUS_NOT_EXECUTED": 1,
		"REQUEST_STATUS_SUCCEEDED":    2,
		"REQUEST_STATUS_FAILED":       3,
	}
)

func (x RequestStatus) Enum() *RequestStatus {
	p := new(RequestStatus)
	*p = x
	return p
}

func (x RequestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_defund_dex_dex_proto_enumTypes[3].Descriptor()
}

func (RequestStatus) Type() protoreflect.EnumType {
	return &file_defund_dex_dex_proto_enumTypes[3]
}

func (x RequestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestStatus.Descriptor instead.
func (RequestStatus) EnumDescriptor() ([]byte, []int) {
	return file_defund_dex_dex_proto_rawDescGZIP(), []int{3}
}

// OrderStatus enumerates order statuses.
type OrderStatus int32

const (
	// ORDER_STATUS_UNSPECIFIED specifies unknown order status
	OrderStatus_ORDER_STATUS_UNSPECIFIED OrderStatus = 0
	// ORDER_STATUS_NOT_EXECUTED indicates the order has not been executed yet
	OrderStatus_ORDER_STATUS_NOT_EXECUTED OrderStatus = 1
	// ORDER_STATUS_NOT_MATCHED indicates the order has been executed but has no match
	OrderStatus_ORDER_STATUS_NOT_MATCHED OrderStatus = 2
	// ORDER_STATUS_PARTIALLY_MATCHED indicates the order has been partially matched
	OrderStatus_ORDER_STATUS_PARTIALLY_MATCHED OrderStatus = 3
	// ORDER_STATUS_COMPLETED indicates the order has been fully matched and completed
	OrderStatus_ORDER_STATUS_COMPLETED OrderStatus = 4
	// ORDER_STATUS_CANCELED indicates the order has been canceled
	OrderStatus_ORDER_STATUS_CANCELED OrderStatus = 5
	// ORDER_STATUS_EXPIRED indicates the order has been expired
	OrderStatus_ORDER_STATUS_EXPIRED OrderStatus = 6
)

// Enum value maps for OrderStatus.
var (
	OrderStatus_name = map[int32]string{
		0: "ORDER_STATUS_UNSPECIFIED",
		1: "ORDER_STATUS_NOT_EXECUTED",
		2: "ORDER_STATUS_NOT_MATCHED",
		3: "ORDER_STATUS_PARTIALLY_MATCHED",
		4: "ORDER_STATUS_COMPLETED",
		5: "ORDER_STATUS_CANCELED",
		6: "ORDER_STATUS_EXPIRED",
	}
	OrderStatus_value = map[string]int32{
		"ORDER_STATUS_UNSPECIFIED":       0,
		"ORDER_STATUS_NOT_EXECUTED":      1,
		"ORDER_STATUS_NOT_MATCHED":       2,
		"ORDER_STATUS_PARTIALLY_MATCHED": 3,
		"ORDER_STATUS_COMPLETED":         4,
		"ORDER_STATUS_CANCELED":          5,
		"ORDER_STATUS_EXPIRED":           6,
	}
)

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}

func (x OrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_defund_dex_dex_proto_enumTypes[4].Descriptor()
}

func (OrderStatus) Type() protoreflect.EnumType {
	return &file_defund_dex_dex_proto_enumTypes[4]
}

func (x OrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStatus.Descriptor instead.
func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_defund_dex_dex_proto_rawDescGZIP(), []int{4}
}

// Pair defines a coin pair.
type Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BaseCoinDenom  string `protobuf:"bytes,2,opt,name=base_coin_denom,json=baseCoinDenom,proto3" json:"base_coin_denom,omitempty"`
	QuoteCoinDenom string `protobuf:"bytes,3,opt,name=quote_coin_denom,json=quoteCoinDenom,proto3" json:"quote_coin_denom,omitempty"`
	EscrowAddress  string `protobuf:"bytes,4,opt,name=escrow_address,json=escrowAddress,proto3" json:"escrow_address,omitempty"`
	LastOrderId    uint64 `protobuf:"varint,5,opt,name=last_order_id,json=lastOrderId,proto3" json:"last_order_id,omitempty"`
	LastPrice      string `protobuf:"bytes,6,opt,name=last_price,json=lastPrice,proto3" json:"last_price,omitempty"`
	CurrentBatchId uint64 `protobuf:"varint,7,opt,name=current_batch_id,json=currentBatchId,proto3" json:"current_batch_id,omitempty"`
}

func (x *Pair) Reset() {
	*x = Pair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_defund_dex_dex_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pair) ProtoMessage() {}

// Deprecated: Use Pair.ProtoReflect.Descriptor instead.
func (*Pair) Descriptor() ([]byte, []int) {
	return file_defund_dex_dex_proto_rawDescGZIP(), []int{0}
}

func (x *Pair) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Pair) GetBaseCoinDenom() string {
	if x != nil {
		return x.BaseCoinDenom
	}
	return ""
}

func (x *Pair) GetQuoteCoinDenom() string {
	if x != nil {
		return x.QuoteCoinDenom
	}
	return ""
}

func (x *Pair) GetEscrowAddress() string {
	if x != nil {
		return x.EscrowAddress
	}
	return ""
}

func (x *Pair) GetLastOrderId() uint64 {
	if x != nil {
		return x.LastOrderId
	}
	return 0
}

func (x *Pair) GetLastPrice() string {
	if x != nil {
		return x.LastPrice
	}
	return ""
}

func (x *Pair) GetCurrentBatchId() uint64 {
	if x != nil {
		return x.CurrentBatchId
	}
	return 0
}

// Pool defines generic liquidity pool object which can be either a basic pool or a
// ranged pool.
type Pool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type_                 PoolType `protobuf:"varint,1,opt,name=type,proto3,enum=defund.dex.PoolType" json:"type,omitempty"`
	Id                    uint64   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	PairId                uint64   `protobuf:"varint,3,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
	Creator               string   `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	ReserveAddress        string   `protobuf:"bytes,5,opt,name=reserve_address,json=reserveAddress,proto3" json:"reserve_address,omitempty"`
	PoolCoinDenom         string   `protobuf:"bytes,6,opt,name=pool_coin_denom,json=poolCoinDenom,proto3" json:"pool_coin_denom,omitempty"`
	MinPrice              string   `protobuf:"bytes,7,opt,name=min_price,json=minPrice,proto3" json:"min_price,omitempty"`
	MaxPrice              string   `protobuf:"bytes,8,opt,name=max_price,json=maxPrice,proto3" json:"max_price,omitempty"`
	LastDepositRequestId  uint64   `protobuf:"varint,9,opt,name=last_deposit_request_id,json=lastDepositRequestId,proto3" json:"last_deposit_request_id,omitempty"`
	LastWithdrawRequestId uint64   `protobuf:"varint,10,opt,name=last_withdraw_request_id,json=lastWithdrawRequestId,proto3" json:"last_withdraw_request_id,omitempty"`
	Disabled              bool     `protobuf:"varint,11,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *Pool) Reset() {
	*x = Pool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_defund_dex_dex_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pool) ProtoMessage() {}

// Deprecated: Use Pool.ProtoReflect.Descriptor instead.
func (*Pool) Descriptor() ([]byte, []int) {
	return file_defund_dex_dex_proto_rawDescGZIP(), []int{1}
}

func (x *Pool) GetType_() PoolType {
	if x != nil {
		return x.Type_
	}
	return PoolType_POOL_TYPE_UNSPECIFIED
}

func (x *Pool) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Pool) GetPairId() uint64 {
	if x != nil {
		return x.PairId
	}
	return 0
}

func (x *Pool) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Pool) GetReserveAddress() string {
	if x != nil {
		return x.ReserveAddress
	}
	return ""
}

func (x *Pool) GetPoolCoinDenom() string {
	if x != nil {
		return x.PoolCoinDenom
	}
	return ""
}

func (x *Pool) GetMinPrice() string {
	if x != nil {
		return x.MinPrice
	}
	return ""
}

func (x *Pool) GetMaxPrice() string {
	if x != nil {
		return x.MaxPrice
	}
	return ""
}

func (x *Pool) GetLastDepositRequestId() uint64 {
	if x != nil {
		return x.LastDepositRequestId
	}
	return 0
}

func (x *Pool) GetLastWithdrawRequestId() uint64 {
	if x != nil {
		return x.LastWithdrawRequestId
	}
	return 0
}

func (x *Pool) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

// DepositRequest defines a deposit request.
type DepositRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id specifies the id for the request
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// pool_id specifies the pool id
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// msg_height specifies the block height when the request is stored for the batch execution
	MsgHeight int64 `protobuf:"varint,3,opt,name=msg_height,json=msgHeight,proto3" json:"msg_height,omitempty"`
	// depositor specifies the bech32-encoded address that makes a deposit to the pool
	Depositor string `protobuf:"bytes,4,opt,name=depositor,proto3" json:"depositor,omitempty"`
	// deposit_coins specifies the amount of coins to deposit.
	DepositCoins []*v1beta1.Coin `protobuf:"bytes,5,rep,name=deposit_coins,json=depositCoins,proto3" json:"deposit_coins,omitempty"`
	// accepted_coins specifies the amount of coins that are accepted.
	AcceptedCoins  []*v1beta1.Coin `protobuf:"bytes,6,rep,name=accepted_coins,json=acceptedCoins,proto3" json:"accepted_coins,omitempty"`
	MintedPoolCoin *v1beta1.Coin   `protobuf:"bytes,7,opt,name=minted_pool_coin,json=mintedPoolCoin,proto3" json:"minted_pool_coin,omitempty"`
	Status         RequestStatus   `protobuf:"varint,8,opt,name=status,proto3,enum=defund.dex.RequestStatus" json:"status,omitempty"`
}

func (x *DepositRequest) Reset() {
	*x = DepositRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_defund_dex_dex_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositRequest) ProtoMessage() {}

// Deprecated: Use DepositRequest.ProtoReflect.Descriptor instead.
func (*DepositRequest) Descriptor() ([]byte, []int) {
	return file_defund_dex_dex_proto_rawDescGZIP(), []int{2}
}

func (x *DepositRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DepositRequest) GetPoolId() uint64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *DepositRequest) GetMsgHeight() int64 {
	if x != nil {
		return x.MsgHeight
	}
	return 0
}

func (x *DepositRequest) GetDepositor() string {
	if x != nil {
		return x.Depositor
	}
	return ""
}

func (x *DepositRequest) GetDepositCoins() []*v1beta1.Coin {
	if x != nil {
		return x.DepositCoins
	}
	return nil
}

func (x *DepositRequest) GetAcceptedCoins() []*v1beta1.Coin {
	if x != nil {
		return x.AcceptedCoins
	}
	return nil
}

func (x *DepositRequest) GetMintedPoolCoin() *v1beta1.Coin {
	if x != nil {
		return x.MintedPoolCoin
	}
	return nil
}

func (x *DepositRequest) GetStatus() RequestStatus {
	if x != nil {
		return x.Status
	}
	return RequestStatus_REQUEST_STATUS_UNSPECIFIED
}

// WithdrawRequest defines a withdraw request.
type WithdrawRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id specifies the id for the request
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// pool_id specifies the pool id
	PoolId uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// msg_height specifies the block height when the request is stored for the batch execution
	MsgHeight int64 `protobuf:"varint,3,opt,name=msg_height,json=msgHeight,proto3" json:"msg_height,omitempty"`
	// withdrawer specifies the bech32-encoded address that withdraws pool coin from the pool
	Withdrawer string `protobuf:"bytes,4,opt,name=withdrawer,proto3" json:"withdrawer,omitempty"`
	// pool_coin specifies the pool coin that is a proof of liquidity provider for the pool
	PoolCoin *v1beta1.Coin `protobuf:"bytes,5,opt,name=pool_coin,json=poolCoin,proto3" json:"pool_coin,omitempty"`
	// withdrawn_coins specifies the amount of coins that are withdrawn.
	WithdrawnCoins []*v1beta1.Coin `protobuf:"bytes,6,rep,name=withdrawn_coins,json=withdrawnCoins,proto3" json:"withdrawn_coins,omitempty"`
	Status         RequestStatus   `protobuf:"varint,7,opt,name=status,proto3,enum=defund.dex.RequestStatus" json:"status,omitempty"`
}

func (x *WithdrawRequest) Reset() {
	*x = WithdrawRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_defund_dex_dex_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawRequest) ProtoMessage() {}

// Deprecated: Use WithdrawRequest.ProtoReflect.Descriptor instead.
func (*WithdrawRequest) Descriptor() ([]byte, []int) {
	return file_defund_dex_dex_proto_rawDescGZIP(), []int{3}
}

func (x *WithdrawRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WithdrawRequest) GetPoolId() uint64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *WithdrawRequest) GetMsgHeight() int64 {
	if x != nil {
		return x.MsgHeight
	}
	return 0
}

func (x *WithdrawRequest) GetWithdrawer() string {
	if x != nil {
		return x.Withdrawer
	}
	return ""
}

func (x *WithdrawRequest) GetPoolCoin() *v1beta1.Coin {
	if x != nil {
		return x.PoolCoin
	}
	return nil
}

func (x *WithdrawRequest) GetWithdrawnCoins() []*v1beta1.Coin {
	if x != nil {
		return x.WithdrawnCoins
	}
	return nil
}

func (x *WithdrawRequest) GetStatus() RequestStatus {
	if x != nil {
		return x.Status
	}
	return RequestStatus_REQUEST_STATUS_UNSPECIFIED
}

// Order defines an order.
type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type specifies the typo of the order
	Type_ OrderType `protobuf:"varint,1,opt,name=type,proto3,enum=defund.dex.OrderType" json:"type,omitempty"`
	// id specifies the id of the order
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// pair_id specifies the pair id
	PairId uint64 `protobuf:"varint,3,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty"`
	// msg_height specifies the block height when the order is stored for the batch execution
	MsgHeight int64 `protobuf:"varint,4,opt,name=msg_height,json=msgHeight,proto3" json:"msg_height,omitempty"`
	// orderer specifies the bech32-encoded address that makes an order
	Orderer string `protobuf:"bytes,5,opt,name=orderer,proto3" json:"orderer,omitempty"`
	// direction specifies the order direction; either buy or sell
	Direction OrderDirection `protobuf:"varint,6,opt,name=direction,proto3,enum=defund.dex.OrderDirection" json:"direction,omitempty"`
	OfferCoin *v1beta1.Coin  `protobuf:"bytes,7,opt,name=offer_coin,json=offerCoin,proto3" json:"offer_coin,omitempty"`
	// remaining_offer_coin specifies the remaining offer coin
	RemainingOfferCoin *v1beta1.Coin `protobuf:"bytes,8,opt,name=remaining_offer_coin,json=remainingOfferCoin,proto3" json:"remaining_offer_coin,omitempty"`
	// received_coin specifies the received coin after the swap
	ReceivedCoin *v1beta1.Coin `protobuf:"bytes,9,opt,name=received_coin,json=receivedCoin,proto3" json:"received_coin,omitempty"`
	// price specifies the price that an orderer is willing to swap
	Price      string `protobuf:"bytes,10,opt,name=price,proto3" json:"price,omitempty"`
	Amount     string `protobuf:"bytes,11,opt,name=amount,proto3" json:"amount,omitempty"`
	OpenAmount string `protobuf:"bytes,12,opt,name=open_amount,json=openAmount,proto3" json:"open_amount,omitempty"`
	// batch_id specifies the pair's batch id when the request is stored
	BatchId  uint64                 `protobuf:"varint,13,opt,name=batch_id,json=batchId,proto3" json:"batch_id,omitempty"`
	ExpireAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	Status   OrderStatus            `protobuf:"varint,15,opt,name=status,proto3,enum=defund.dex.OrderStatus" json:"status,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_defund_dex_dex_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_defund_dex_dex_proto_rawDescGZIP(), []int{4}
}

func (x *Order) GetType_() OrderType {
	if x != nil {
		return x.Type_
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *Order) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Order) GetPairId() uint64 {
	if x != nil {
		return x.PairId
	}
	return 0
}

func (x *Order) GetMsgHeight() int64 {
	if x != nil {
		return x.MsgHeight
	}
	return 0
}

func (x *Order) GetOrderer() string {
	if x != nil {
		return x.Orderer
	}
	return ""
}

func (x *Order) GetDirection() OrderDirection {
	if x != nil {
		return x.Direction
	}
	return OrderDirection_ORDER_DIRECTION_UNSPECIFIED
}

func (x *Order) GetOfferCoin() *v1beta1.Coin {
	if x != nil {
		return x.OfferCoin
	}
	return nil
}

func (x *Order) GetRemainingOfferCoin() *v1beta1.Coin {
	if x != nil {
		return x.RemainingOfferCoin
	}
	return nil
}

func (x *Order) GetReceivedCoin() *v1beta1.Coin {
	if x != nil {
		return x.ReceivedCoin
	}
	return nil
}

func (x *Order) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *Order) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Order) GetOpenAmount() string {
	if x != nil {
		return x.OpenAmount
	}
	return ""
}

func (x *Order) GetBatchId() uint64 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

func (x *Order) GetExpireAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireAt
	}
	return nil
}

func (x *Order) GetStatus() OrderStatus {
	if x != nil {
		return x.Status
	}
	return OrderStatus_ORDER_STATUS_UNSPECIFIED
}

var File_defund_dex_dex_proto protoreflect.FileDescriptor

var file_defund_dex_dex_proto_rawDesc = []byte{
	0x0a, 0x14, 0x64, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x2f, 0x64, 0x65, 0x78, 0x2f, 0x64, 0x65, 0x78,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x64, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x2e, 0x64,
	0x65, 0x78, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x6d, 0x73,
	0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x9d, 0x02, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x6e, 0x6f,
	0x6d, 0x12, 0x28, 0x0a, 0x10, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f,
	0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x73, 0x63, 0x72, 0x6f, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x73, 0x63, 0x72, 0x6f, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xda, 0xde, 0x1f, 0x1b,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74,
	0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0x52, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x22, 0xcc, 0x03, 0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x64, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x2e, 0x64, 0x65, 0x78, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x6e,
	0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x6f, 0x6c, 0x43, 0x6f,
	0x69, 0x6e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x3c, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xda, 0xde, 0x1f, 0x1b,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74,
	0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0x52, 0x08, 0x6d, 0x69, 0x6e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e,
	0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6c, 0x61,
	0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0xda, 0x03, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x73, 0x67, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x73, 0x67, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x70, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00,
	0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x0c, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x72, 0x0a, 0x0e, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x30, 0xc8,
	0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d,
	0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52,
	0x0d, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x49,
	0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x6f,
	0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x74, 0x65,
	0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x64, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe0, 0x02, 0x0a,
	0x0f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x73, 0x67,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x73, 0x67, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x08, 0x70, 0x6f,
	0x6f, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x74, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x6e, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00,
	0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x0e, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x64,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xe8, 0x05, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x2e, 0x64, 0x65, 0x78, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x61, 0x69, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x73, 0x67, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x73, 0x67, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3e, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42,
	0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x09, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x51, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52,
	0x12, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x43,
	0x6f, 0x69, 0x6e, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d,
	0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e,
	0x49, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x6f,
	0x70, 0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x52,
	0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52,
	0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x96, 0x01, 0x0a, 0x08, 0x50,
	0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x50, 0x4f, 0x4f, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x1a, 0x17, 0x8a, 0x9d, 0x20, 0x13, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x50,
	0x4f, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01,
	0x1a, 0x11, 0x8a, 0x9d, 0x20, 0x0d, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x12, 0x8a, 0x9d, 0x20, 0x0e, 0x50,
	0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x1a, 0x04, 0x88,
	0xa3, 0x1e, 0x00, 0x2a, 0xc1, 0x01, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x34, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x18, 0x8a,
	0x9d, 0x20, 0x14, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x1a, 0x12, 0x8a,
	0x9d, 0x20, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x02, 0x1a, 0x13, 0x8a, 0x9d, 0x20, 0x0f, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4d, 0x10, 0x03,
	0x1a, 0x0f, 0x8a, 0x9d, 0x20, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x4d, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x2a, 0xb8, 0x01, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1b, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x1a, 0x1d, 0x8a, 0x9d, 0x20,
	0x19, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x55,
	0x59, 0x10, 0x01, 0x1a, 0x15, 0x8a, 0x9d, 0x20, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45,
	0x4c, 0x4c, 0x10, 0x02, 0x1a, 0x16, 0x8a, 0x9d, 0x20, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x1a, 0x04, 0x88, 0xa3,
	0x1e, 0x00, 0x2a, 0x80, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x1a, 0x1c, 0x8a, 0x9d, 0x20, 0x18, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x1a, 0x1c, 0x8a, 0x9d, 0x20, 0x18, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x12, 0x38, 0x0a, 0x18, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x02, 0x1a,
	0x1a, 0x8a, 0x9d, 0x20, 0x16, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x17, 0x8a, 0x9d, 0x20, 0x13, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x1a,
	0x04, 0x88, 0xa3, 0x1e, 0x00, 0x2a, 0xa2, 0x03, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x1a, 0x1a, 0x8a, 0x9d, 0x20, 0x16, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x39, 0x0a, 0x19, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x44, 0x10, 0x01, 0x1a, 0x1a,
	0x8a, 0x9d, 0x20, 0x16, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e,
	0x6f, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d,
	0x41, 0x54, 0x43, 0x48, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x19, 0x8a, 0x9d, 0x20, 0x15, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x1f, 0x8a, 0x9d, 0x20, 0x1b, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x6c,
	0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x1a, 0x18, 0x8a, 0x9d, 0x20, 0x14, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x17, 0x8a, 0x9d, 0x20, 0x13, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x06, 0x1a, 0x16, 0x8a, 0x9d,
	0x20, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x42, 0x80, 0x01, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x2e, 0x64, 0x65, 0x78, 0x42, 0x08, 0x44,
	0x65, 0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x2f, 0x64, 0x65, 0x78, 0xa2, 0x02, 0x03, 0x44, 0x44, 0x58, 0xaa, 0x02, 0x0a, 0x44,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x2e, 0x44, 0x65, 0x78, 0xca, 0x02, 0x0a, 0x44, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5c, 0x44, 0x65, 0x78, 0xe2, 0x02, 0x16, 0x44, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5c,
	0x44, 0x65, 0x78, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x0b, 0x44, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x3a, 0x3a, 0x44, 0x65, 0x78, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_defund_dex_dex_proto_rawDescOnce sync.Once
	file_defund_dex_dex_proto_rawDescData = file_defund_dex_dex_proto_rawDesc
)

func file_defund_dex_dex_proto_rawDescGZIP() []byte {
	file_defund_dex_dex_proto_rawDescOnce.Do(func() {
		file_defund_dex_dex_proto_rawDescData = protoimpl.X.CompressGZIP(file_defund_dex_dex_proto_rawDescData)
	})
	return file_defund_dex_dex_proto_rawDescData
}

var file_defund_dex_dex_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_defund_dex_dex_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_defund_dex_dex_proto_goTypes = []interface{}{
	(PoolType)(0),                 // 0: defund.dex.PoolType
	(OrderType)(0),                // 1: defund.dex.OrderType
	(OrderDirection)(0),           // 2: defund.dex.OrderDirection
	(RequestStatus)(0),            // 3: defund.dex.RequestStatus
	(OrderStatus)(0),              // 4: defund.dex.OrderStatus
	(*Pair)(nil),                  // 5: defund.dex.Pair
	(*Pool)(nil),                  // 6: defund.dex.Pool
	(*DepositRequest)(nil),        // 7: defund.dex.DepositRequest
	(*WithdrawRequest)(nil),       // 8: defund.dex.WithdrawRequest
	(*Order)(nil),                 // 9: defund.dex.Order
	(*v1beta1.Coin)(nil),          // 10: cosmos.base.v1beta1.Coin
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
}
var file_defund_dex_dex_proto_depIdxs = []int32{
	0,  // 0: defund.dex.Pool.type:type_name -> defund.dex.PoolType
	10, // 1: defund.dex.DepositRequest.deposit_coins:type_name -> cosmos.base.v1beta1.Coin
	10, // 2: defund.dex.DepositRequest.accepted_coins:type_name -> cosmos.base.v1beta1.Coin
	10, // 3: defund.dex.DepositRequest.minted_pool_coin:type_name -> cosmos.base.v1beta1.Coin
	3,  // 4: defund.dex.DepositRequest.status:type_name -> defund.dex.RequestStatus
	10, // 5: defund.dex.WithdrawRequest.pool_coin:type_name -> cosmos.base.v1beta1.Coin
	10, // 6: defund.dex.WithdrawRequest.withdrawn_coins:type_name -> cosmos.base.v1beta1.Coin
	3,  // 7: defund.dex.WithdrawRequest.status:type_name -> defund.dex.RequestStatus
	1,  // 8: defund.dex.Order.type:type_name -> defund.dex.OrderType
	2,  // 9: defund.dex.Order.direction:type_name -> defund.dex.OrderDirection
	10, // 10: defund.dex.Order.offer_coin:type_name -> cosmos.base.v1beta1.Coin
	10, // 11: defund.dex.Order.remaining_offer_coin:type_name -> cosmos.base.v1beta1.Coin
	10, // 12: defund.dex.Order.received_coin:type_name -> cosmos.base.v1beta1.Coin
	11, // 13: defund.dex.Order.expire_at:type_name -> google.protobuf.Timestamp
	4,  // 14: defund.dex.Order.status:type_name -> defund.dex.OrderStatus
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_defund_dex_dex_proto_init() }
func file_defund_dex_dex_proto_init() {
	if File_defund_dex_dex_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_defund_dex_dex_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_defund_dex_dex_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_defund_dex_dex_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_defund_dex_dex_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_defund_dex_dex_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_defund_dex_dex_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_defund_dex_dex_proto_goTypes,
		DependencyIndexes: file_defund_dex_dex_proto_depIdxs,
		EnumInfos:         file_defund_dex_dex_proto_enumTypes,
		MessageInfos:      file_defund_dex_dex_proto_msgTypes,
	}.Build()
	File_defund_dex_dex_proto = out.File
	file_defund_dex_dex_proto_rawDesc = nil
	file_defund_dex_dex_proto_goTypes = nil
	file_defund_dex_dex_proto_depIdxs = nil
}
