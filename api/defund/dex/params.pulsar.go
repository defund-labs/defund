// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package dex

import (
	_ "cosmossdk.io/api/amino"
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	_ "cosmossdk.io/api/cosmos/msg/v1"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_Params_6_list)(nil)

type _Params_6_list struct {
	list *[]*v1beta1.Coin
}

func (x *_Params_6_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Params_6_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Params_6_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_Params_6_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Params_6_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_6_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Params_6_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_6_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Params_7_list)(nil)

type _Params_7_list struct {
	list *[]*v1beta1.Coin
}

func (x *_Params_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Params_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Params_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_Params_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Params_7_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_7_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Params_7_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_7_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Params                                       protoreflect.MessageDescriptor
	fd_Params_batch_size                            protoreflect.FieldDescriptor
	fd_Params_tick_precision                        protoreflect.FieldDescriptor
	fd_Params_fee_collector_address                 protoreflect.FieldDescriptor
	fd_Params_dust_collector_address                protoreflect.FieldDescriptor
	fd_Params_min_initial_pool_coin_supply          protoreflect.FieldDescriptor
	fd_Params_pair_creation_fee                     protoreflect.FieldDescriptor
	fd_Params_pool_creation_fee                     protoreflect.FieldDescriptor
	fd_Params_min_initial_deposit_amount            protoreflect.FieldDescriptor
	fd_Params_max_price_limit_ratio                 protoreflect.FieldDescriptor
	fd_Params_max_num_market_making_order_ticks     protoreflect.FieldDescriptor
	fd_Params_max_num_market_making_orders_per_pair protoreflect.FieldDescriptor
	fd_Params_max_order_lifespan                    protoreflect.FieldDescriptor
	fd_Params_swap_fee_rate                         protoreflect.FieldDescriptor
	fd_Params_withdraw_fee_rate                     protoreflect.FieldDescriptor
	fd_Params_deposit_extra_gas                     protoreflect.FieldDescriptor
	fd_Params_withdraw_extra_gas                    protoreflect.FieldDescriptor
	fd_Params_order_extra_gas                       protoreflect.FieldDescriptor
	fd_Params_max_num_active_pools_per_pair         protoreflect.FieldDescriptor
)

func init() {
	file_defund_dex_params_proto_init()
	md_Params = File_defund_dex_params_proto.Messages().ByName("Params")
	fd_Params_batch_size = md_Params.Fields().ByName("batch_size")
	fd_Params_tick_precision = md_Params.Fields().ByName("tick_precision")
	fd_Params_fee_collector_address = md_Params.Fields().ByName("fee_collector_address")
	fd_Params_dust_collector_address = md_Params.Fields().ByName("dust_collector_address")
	fd_Params_min_initial_pool_coin_supply = md_Params.Fields().ByName("min_initial_pool_coin_supply")
	fd_Params_pair_creation_fee = md_Params.Fields().ByName("pair_creation_fee")
	fd_Params_pool_creation_fee = md_Params.Fields().ByName("pool_creation_fee")
	fd_Params_min_initial_deposit_amount = md_Params.Fields().ByName("min_initial_deposit_amount")
	fd_Params_max_price_limit_ratio = md_Params.Fields().ByName("max_price_limit_ratio")
	fd_Params_max_num_market_making_order_ticks = md_Params.Fields().ByName("max_num_market_making_order_ticks")
	fd_Params_max_num_market_making_orders_per_pair = md_Params.Fields().ByName("max_num_market_making_orders_per_pair")
	fd_Params_max_order_lifespan = md_Params.Fields().ByName("max_order_lifespan")
	fd_Params_swap_fee_rate = md_Params.Fields().ByName("swap_fee_rate")
	fd_Params_withdraw_fee_rate = md_Params.Fields().ByName("withdraw_fee_rate")
	fd_Params_deposit_extra_gas = md_Params.Fields().ByName("deposit_extra_gas")
	fd_Params_withdraw_extra_gas = md_Params.Fields().ByName("withdraw_extra_gas")
	fd_Params_order_extra_gas = md_Params.Fields().ByName("order_extra_gas")
	fd_Params_max_num_active_pools_per_pair = md_Params.Fields().ByName("max_num_active_pools_per_pair")
}

var _ protoreflect.Message = (*fastReflection_Params)(nil)

type fastReflection_Params Params

func (x *Params) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Params)(x)
}

func (x *Params) slowProtoReflect() protoreflect.Message {
	mi := &file_defund_dex_params_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Params_messageType fastReflection_Params_messageType
var _ protoreflect.MessageType = fastReflection_Params_messageType{}

type fastReflection_Params_messageType struct{}

func (x fastReflection_Params_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Params)(nil)
}
func (x fastReflection_Params_messageType) New() protoreflect.Message {
	return new(fastReflection_Params)
}
func (x fastReflection_Params_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Params) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Params) Type() protoreflect.MessageType {
	return _fastReflection_Params_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Params) New() protoreflect.Message {
	return new(fastReflection_Params)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Params) Interface() protoreflect.ProtoMessage {
	return (*Params)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Params) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.BatchSize != uint32(0) {
		value := protoreflect.ValueOfUint32(x.BatchSize)
		if !f(fd_Params_batch_size, value) {
			return
		}
	}
	if x.TickPrecision != uint32(0) {
		value := protoreflect.ValueOfUint32(x.TickPrecision)
		if !f(fd_Params_tick_precision, value) {
			return
		}
	}
	if x.FeeCollectorAddress != "" {
		value := protoreflect.ValueOfString(x.FeeCollectorAddress)
		if !f(fd_Params_fee_collector_address, value) {
			return
		}
	}
	if x.DustCollectorAddress != "" {
		value := protoreflect.ValueOfString(x.DustCollectorAddress)
		if !f(fd_Params_dust_collector_address, value) {
			return
		}
	}
	if x.MinInitialPoolCoinSupply != "" {
		value := protoreflect.ValueOfString(x.MinInitialPoolCoinSupply)
		if !f(fd_Params_min_initial_pool_coin_supply, value) {
			return
		}
	}
	if len(x.PairCreationFee) != 0 {
		value := protoreflect.ValueOfList(&_Params_6_list{list: &x.PairCreationFee})
		if !f(fd_Params_pair_creation_fee, value) {
			return
		}
	}
	if len(x.PoolCreationFee) != 0 {
		value := protoreflect.ValueOfList(&_Params_7_list{list: &x.PoolCreationFee})
		if !f(fd_Params_pool_creation_fee, value) {
			return
		}
	}
	if x.MinInitialDepositAmount != "" {
		value := protoreflect.ValueOfString(x.MinInitialDepositAmount)
		if !f(fd_Params_min_initial_deposit_amount, value) {
			return
		}
	}
	if x.MaxPriceLimitRatio != "" {
		value := protoreflect.ValueOfString(x.MaxPriceLimitRatio)
		if !f(fd_Params_max_price_limit_ratio, value) {
			return
		}
	}
	if x.MaxNumMarketMakingOrderTicks != uint32(0) {
		value := protoreflect.ValueOfUint32(x.MaxNumMarketMakingOrderTicks)
		if !f(fd_Params_max_num_market_making_order_ticks, value) {
			return
		}
	}
	if x.MaxNumMarketMakingOrdersPerPair != uint32(0) {
		value := protoreflect.ValueOfUint32(x.MaxNumMarketMakingOrdersPerPair)
		if !f(fd_Params_max_num_market_making_orders_per_pair, value) {
			return
		}
	}
	if x.MaxOrderLifespan != nil {
		value := protoreflect.ValueOfMessage(x.MaxOrderLifespan.ProtoReflect())
		if !f(fd_Params_max_order_lifespan, value) {
			return
		}
	}
	if x.SwapFeeRate != "" {
		value := protoreflect.ValueOfString(x.SwapFeeRate)
		if !f(fd_Params_swap_fee_rate, value) {
			return
		}
	}
	if x.WithdrawFeeRate != "" {
		value := protoreflect.ValueOfString(x.WithdrawFeeRate)
		if !f(fd_Params_withdraw_fee_rate, value) {
			return
		}
	}
	if x.DepositExtraGas != uint64(0) {
		value := protoreflect.ValueOfUint64(x.DepositExtraGas)
		if !f(fd_Params_deposit_extra_gas, value) {
			return
		}
	}
	if x.WithdrawExtraGas != uint64(0) {
		value := protoreflect.ValueOfUint64(x.WithdrawExtraGas)
		if !f(fd_Params_withdraw_extra_gas, value) {
			return
		}
	}
	if x.OrderExtraGas != uint64(0) {
		value := protoreflect.ValueOfUint64(x.OrderExtraGas)
		if !f(fd_Params_order_extra_gas, value) {
			return
		}
	}
	if x.MaxNumActivePoolsPerPair != uint32(0) {
		value := protoreflect.ValueOfUint32(x.MaxNumActivePoolsPerPair)
		if !f(fd_Params_max_num_active_pools_per_pair, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Params) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "defund.dex.Params.batch_size":
		return x.BatchSize != uint32(0)
	case "defund.dex.Params.tick_precision":
		return x.TickPrecision != uint32(0)
	case "defund.dex.Params.fee_collector_address":
		return x.FeeCollectorAddress != ""
	case "defund.dex.Params.dust_collector_address":
		return x.DustCollectorAddress != ""
	case "defund.dex.Params.min_initial_pool_coin_supply":
		return x.MinInitialPoolCoinSupply != ""
	case "defund.dex.Params.pair_creation_fee":
		return len(x.PairCreationFee) != 0
	case "defund.dex.Params.pool_creation_fee":
		return len(x.PoolCreationFee) != 0
	case "defund.dex.Params.min_initial_deposit_amount":
		return x.MinInitialDepositAmount != ""
	case "defund.dex.Params.max_price_limit_ratio":
		return x.MaxPriceLimitRatio != ""
	case "defund.dex.Params.max_num_market_making_order_ticks":
		return x.MaxNumMarketMakingOrderTicks != uint32(0)
	case "defund.dex.Params.max_num_market_making_orders_per_pair":
		return x.MaxNumMarketMakingOrdersPerPair != uint32(0)
	case "defund.dex.Params.max_order_lifespan":
		return x.MaxOrderLifespan != nil
	case "defund.dex.Params.swap_fee_rate":
		return x.SwapFeeRate != ""
	case "defund.dex.Params.withdraw_fee_rate":
		return x.WithdrawFeeRate != ""
	case "defund.dex.Params.deposit_extra_gas":
		return x.DepositExtraGas != uint64(0)
	case "defund.dex.Params.withdraw_extra_gas":
		return x.WithdrawExtraGas != uint64(0)
	case "defund.dex.Params.order_extra_gas":
		return x.OrderExtraGas != uint64(0)
	case "defund.dex.Params.max_num_active_pools_per_pair":
		return x.MaxNumActivePoolsPerPair != uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.Params"))
		}
		panic(fmt.Errorf("message defund.dex.Params does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "defund.dex.Params.batch_size":
		x.BatchSize = uint32(0)
	case "defund.dex.Params.tick_precision":
		x.TickPrecision = uint32(0)
	case "defund.dex.Params.fee_collector_address":
		x.FeeCollectorAddress = ""
	case "defund.dex.Params.dust_collector_address":
		x.DustCollectorAddress = ""
	case "defund.dex.Params.min_initial_pool_coin_supply":
		x.MinInitialPoolCoinSupply = ""
	case "defund.dex.Params.pair_creation_fee":
		x.PairCreationFee = nil
	case "defund.dex.Params.pool_creation_fee":
		x.PoolCreationFee = nil
	case "defund.dex.Params.min_initial_deposit_amount":
		x.MinInitialDepositAmount = ""
	case "defund.dex.Params.max_price_limit_ratio":
		x.MaxPriceLimitRatio = ""
	case "defund.dex.Params.max_num_market_making_order_ticks":
		x.MaxNumMarketMakingOrderTicks = uint32(0)
	case "defund.dex.Params.max_num_market_making_orders_per_pair":
		x.MaxNumMarketMakingOrdersPerPair = uint32(0)
	case "defund.dex.Params.max_order_lifespan":
		x.MaxOrderLifespan = nil
	case "defund.dex.Params.swap_fee_rate":
		x.SwapFeeRate = ""
	case "defund.dex.Params.withdraw_fee_rate":
		x.WithdrawFeeRate = ""
	case "defund.dex.Params.deposit_extra_gas":
		x.DepositExtraGas = uint64(0)
	case "defund.dex.Params.withdraw_extra_gas":
		x.WithdrawExtraGas = uint64(0)
	case "defund.dex.Params.order_extra_gas":
		x.OrderExtraGas = uint64(0)
	case "defund.dex.Params.max_num_active_pools_per_pair":
		x.MaxNumActivePoolsPerPair = uint32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.Params"))
		}
		panic(fmt.Errorf("message defund.dex.Params does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Params) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "defund.dex.Params.batch_size":
		value := x.BatchSize
		return protoreflect.ValueOfUint32(value)
	case "defund.dex.Params.tick_precision":
		value := x.TickPrecision
		return protoreflect.ValueOfUint32(value)
	case "defund.dex.Params.fee_collector_address":
		value := x.FeeCollectorAddress
		return protoreflect.ValueOfString(value)
	case "defund.dex.Params.dust_collector_address":
		value := x.DustCollectorAddress
		return protoreflect.ValueOfString(value)
	case "defund.dex.Params.min_initial_pool_coin_supply":
		value := x.MinInitialPoolCoinSupply
		return protoreflect.ValueOfString(value)
	case "defund.dex.Params.pair_creation_fee":
		if len(x.PairCreationFee) == 0 {
			return protoreflect.ValueOfList(&_Params_6_list{})
		}
		listValue := &_Params_6_list{list: &x.PairCreationFee}
		return protoreflect.ValueOfList(listValue)
	case "defund.dex.Params.pool_creation_fee":
		if len(x.PoolCreationFee) == 0 {
			return protoreflect.ValueOfList(&_Params_7_list{})
		}
		listValue := &_Params_7_list{list: &x.PoolCreationFee}
		return protoreflect.ValueOfList(listValue)
	case "defund.dex.Params.min_initial_deposit_amount":
		value := x.MinInitialDepositAmount
		return protoreflect.ValueOfString(value)
	case "defund.dex.Params.max_price_limit_ratio":
		value := x.MaxPriceLimitRatio
		return protoreflect.ValueOfString(value)
	case "defund.dex.Params.max_num_market_making_order_ticks":
		value := x.MaxNumMarketMakingOrderTicks
		return protoreflect.ValueOfUint32(value)
	case "defund.dex.Params.max_num_market_making_orders_per_pair":
		value := x.MaxNumMarketMakingOrdersPerPair
		return protoreflect.ValueOfUint32(value)
	case "defund.dex.Params.max_order_lifespan":
		value := x.MaxOrderLifespan
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "defund.dex.Params.swap_fee_rate":
		value := x.SwapFeeRate
		return protoreflect.ValueOfString(value)
	case "defund.dex.Params.withdraw_fee_rate":
		value := x.WithdrawFeeRate
		return protoreflect.ValueOfString(value)
	case "defund.dex.Params.deposit_extra_gas":
		value := x.DepositExtraGas
		return protoreflect.ValueOfUint64(value)
	case "defund.dex.Params.withdraw_extra_gas":
		value := x.WithdrawExtraGas
		return protoreflect.ValueOfUint64(value)
	case "defund.dex.Params.order_extra_gas":
		value := x.OrderExtraGas
		return protoreflect.ValueOfUint64(value)
	case "defund.dex.Params.max_num_active_pools_per_pair":
		value := x.MaxNumActivePoolsPerPair
		return protoreflect.ValueOfUint32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.Params"))
		}
		panic(fmt.Errorf("message defund.dex.Params does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "defund.dex.Params.batch_size":
		x.BatchSize = uint32(value.Uint())
	case "defund.dex.Params.tick_precision":
		x.TickPrecision = uint32(value.Uint())
	case "defund.dex.Params.fee_collector_address":
		x.FeeCollectorAddress = value.Interface().(string)
	case "defund.dex.Params.dust_collector_address":
		x.DustCollectorAddress = value.Interface().(string)
	case "defund.dex.Params.min_initial_pool_coin_supply":
		x.MinInitialPoolCoinSupply = value.Interface().(string)
	case "defund.dex.Params.pair_creation_fee":
		lv := value.List()
		clv := lv.(*_Params_6_list)
		x.PairCreationFee = *clv.list
	case "defund.dex.Params.pool_creation_fee":
		lv := value.List()
		clv := lv.(*_Params_7_list)
		x.PoolCreationFee = *clv.list
	case "defund.dex.Params.min_initial_deposit_amount":
		x.MinInitialDepositAmount = value.Interface().(string)
	case "defund.dex.Params.max_price_limit_ratio":
		x.MaxPriceLimitRatio = value.Interface().(string)
	case "defund.dex.Params.max_num_market_making_order_ticks":
		x.MaxNumMarketMakingOrderTicks = uint32(value.Uint())
	case "defund.dex.Params.max_num_market_making_orders_per_pair":
		x.MaxNumMarketMakingOrdersPerPair = uint32(value.Uint())
	case "defund.dex.Params.max_order_lifespan":
		x.MaxOrderLifespan = value.Message().Interface().(*durationpb.Duration)
	case "defund.dex.Params.swap_fee_rate":
		x.SwapFeeRate = value.Interface().(string)
	case "defund.dex.Params.withdraw_fee_rate":
		x.WithdrawFeeRate = value.Interface().(string)
	case "defund.dex.Params.deposit_extra_gas":
		x.DepositExtraGas = value.Uint()
	case "defund.dex.Params.withdraw_extra_gas":
		x.WithdrawExtraGas = value.Uint()
	case "defund.dex.Params.order_extra_gas":
		x.OrderExtraGas = value.Uint()
	case "defund.dex.Params.max_num_active_pools_per_pair":
		x.MaxNumActivePoolsPerPair = uint32(value.Uint())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.Params"))
		}
		panic(fmt.Errorf("message defund.dex.Params does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "defund.dex.Params.pair_creation_fee":
		if x.PairCreationFee == nil {
			x.PairCreationFee = []*v1beta1.Coin{}
		}
		value := &_Params_6_list{list: &x.PairCreationFee}
		return protoreflect.ValueOfList(value)
	case "defund.dex.Params.pool_creation_fee":
		if x.PoolCreationFee == nil {
			x.PoolCreationFee = []*v1beta1.Coin{}
		}
		value := &_Params_7_list{list: &x.PoolCreationFee}
		return protoreflect.ValueOfList(value)
	case "defund.dex.Params.max_order_lifespan":
		if x.MaxOrderLifespan == nil {
			x.MaxOrderLifespan = new(durationpb.Duration)
		}
		return protoreflect.ValueOfMessage(x.MaxOrderLifespan.ProtoReflect())
	case "defund.dex.Params.batch_size":
		panic(fmt.Errorf("field batch_size of message defund.dex.Params is not mutable"))
	case "defund.dex.Params.tick_precision":
		panic(fmt.Errorf("field tick_precision of message defund.dex.Params is not mutable"))
	case "defund.dex.Params.fee_collector_address":
		panic(fmt.Errorf("field fee_collector_address of message defund.dex.Params is not mutable"))
	case "defund.dex.Params.dust_collector_address":
		panic(fmt.Errorf("field dust_collector_address of message defund.dex.Params is not mutable"))
	case "defund.dex.Params.min_initial_pool_coin_supply":
		panic(fmt.Errorf("field min_initial_pool_coin_supply of message defund.dex.Params is not mutable"))
	case "defund.dex.Params.min_initial_deposit_amount":
		panic(fmt.Errorf("field min_initial_deposit_amount of message defund.dex.Params is not mutable"))
	case "defund.dex.Params.max_price_limit_ratio":
		panic(fmt.Errorf("field max_price_limit_ratio of message defund.dex.Params is not mutable"))
	case "defund.dex.Params.max_num_market_making_order_ticks":
		panic(fmt.Errorf("field max_num_market_making_order_ticks of message defund.dex.Params is not mutable"))
	case "defund.dex.Params.max_num_market_making_orders_per_pair":
		panic(fmt.Errorf("field max_num_market_making_orders_per_pair of message defund.dex.Params is not mutable"))
	case "defund.dex.Params.swap_fee_rate":
		panic(fmt.Errorf("field swap_fee_rate of message defund.dex.Params is not mutable"))
	case "defund.dex.Params.withdraw_fee_rate":
		panic(fmt.Errorf("field withdraw_fee_rate of message defund.dex.Params is not mutable"))
	case "defund.dex.Params.deposit_extra_gas":
		panic(fmt.Errorf("field deposit_extra_gas of message defund.dex.Params is not mutable"))
	case "defund.dex.Params.withdraw_extra_gas":
		panic(fmt.Errorf("field withdraw_extra_gas of message defund.dex.Params is not mutable"))
	case "defund.dex.Params.order_extra_gas":
		panic(fmt.Errorf("field order_extra_gas of message defund.dex.Params is not mutable"))
	case "defund.dex.Params.max_num_active_pools_per_pair":
		panic(fmt.Errorf("field max_num_active_pools_per_pair of message defund.dex.Params is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.Params"))
		}
		panic(fmt.Errorf("message defund.dex.Params does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Params) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "defund.dex.Params.batch_size":
		return protoreflect.ValueOfUint32(uint32(0))
	case "defund.dex.Params.tick_precision":
		return protoreflect.ValueOfUint32(uint32(0))
	case "defund.dex.Params.fee_collector_address":
		return protoreflect.ValueOfString("")
	case "defund.dex.Params.dust_collector_address":
		return protoreflect.ValueOfString("")
	case "defund.dex.Params.min_initial_pool_coin_supply":
		return protoreflect.ValueOfString("")
	case "defund.dex.Params.pair_creation_fee":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_Params_6_list{list: &list})
	case "defund.dex.Params.pool_creation_fee":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_Params_7_list{list: &list})
	case "defund.dex.Params.min_initial_deposit_amount":
		return protoreflect.ValueOfString("")
	case "defund.dex.Params.max_price_limit_ratio":
		return protoreflect.ValueOfString("")
	case "defund.dex.Params.max_num_market_making_order_ticks":
		return protoreflect.ValueOfUint32(uint32(0))
	case "defund.dex.Params.max_num_market_making_orders_per_pair":
		return protoreflect.ValueOfUint32(uint32(0))
	case "defund.dex.Params.max_order_lifespan":
		m := new(durationpb.Duration)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "defund.dex.Params.swap_fee_rate":
		return protoreflect.ValueOfString("")
	case "defund.dex.Params.withdraw_fee_rate":
		return protoreflect.ValueOfString("")
	case "defund.dex.Params.deposit_extra_gas":
		return protoreflect.ValueOfUint64(uint64(0))
	case "defund.dex.Params.withdraw_extra_gas":
		return protoreflect.ValueOfUint64(uint64(0))
	case "defund.dex.Params.order_extra_gas":
		return protoreflect.ValueOfUint64(uint64(0))
	case "defund.dex.Params.max_num_active_pools_per_pair":
		return protoreflect.ValueOfUint32(uint32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: defund.dex.Params"))
		}
		panic(fmt.Errorf("message defund.dex.Params does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Params) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in defund.dex.Params", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Params) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Params) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Params) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.BatchSize != 0 {
			n += 1 + runtime.Sov(uint64(x.BatchSize))
		}
		if x.TickPrecision != 0 {
			n += 1 + runtime.Sov(uint64(x.TickPrecision))
		}
		l = len(x.FeeCollectorAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DustCollectorAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MinInitialPoolCoinSupply)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.PairCreationFee) > 0 {
			for _, e := range x.PairCreationFee {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.PoolCreationFee) > 0 {
			for _, e := range x.PoolCreationFee {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.MinInitialDepositAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MaxPriceLimitRatio)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MaxNumMarketMakingOrderTicks != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxNumMarketMakingOrderTicks))
		}
		if x.MaxNumMarketMakingOrdersPerPair != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxNumMarketMakingOrdersPerPair))
		}
		if x.MaxOrderLifespan != nil {
			l = options.Size(x.MaxOrderLifespan)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SwapFeeRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.WithdrawFeeRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.DepositExtraGas != 0 {
			n += 1 + runtime.Sov(uint64(x.DepositExtraGas))
		}
		if x.WithdrawExtraGas != 0 {
			n += 2 + runtime.Sov(uint64(x.WithdrawExtraGas))
		}
		if x.OrderExtraGas != 0 {
			n += 2 + runtime.Sov(uint64(x.OrderExtraGas))
		}
		if x.MaxNumActivePoolsPerPair != 0 {
			n += 2 + runtime.Sov(uint64(x.MaxNumActivePoolsPerPair))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.MaxNumActivePoolsPerPair != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxNumActivePoolsPerPair))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x90
		}
		if x.OrderExtraGas != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.OrderExtraGas))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x88
		}
		if x.WithdrawExtraGas != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.WithdrawExtraGas))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x80
		}
		if x.DepositExtraGas != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DepositExtraGas))
			i--
			dAtA[i] = 0x78
		}
		if len(x.WithdrawFeeRate) > 0 {
			i -= len(x.WithdrawFeeRate)
			copy(dAtA[i:], x.WithdrawFeeRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.WithdrawFeeRate)))
			i--
			dAtA[i] = 0x72
		}
		if len(x.SwapFeeRate) > 0 {
			i -= len(x.SwapFeeRate)
			copy(dAtA[i:], x.SwapFeeRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SwapFeeRate)))
			i--
			dAtA[i] = 0x6a
		}
		if x.MaxOrderLifespan != nil {
			encoded, err := options.Marshal(x.MaxOrderLifespan)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x62
		}
		if x.MaxNumMarketMakingOrdersPerPair != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxNumMarketMakingOrdersPerPair))
			i--
			dAtA[i] = 0x58
		}
		if x.MaxNumMarketMakingOrderTicks != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxNumMarketMakingOrderTicks))
			i--
			dAtA[i] = 0x50
		}
		if len(x.MaxPriceLimitRatio) > 0 {
			i -= len(x.MaxPriceLimitRatio)
			copy(dAtA[i:], x.MaxPriceLimitRatio)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MaxPriceLimitRatio)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.MinInitialDepositAmount) > 0 {
			i -= len(x.MinInitialDepositAmount)
			copy(dAtA[i:], x.MinInitialDepositAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MinInitialDepositAmount)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.PoolCreationFee) > 0 {
			for iNdEx := len(x.PoolCreationFee) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PoolCreationFee[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x3a
			}
		}
		if len(x.PairCreationFee) > 0 {
			for iNdEx := len(x.PairCreationFee) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PairCreationFee[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x32
			}
		}
		if len(x.MinInitialPoolCoinSupply) > 0 {
			i -= len(x.MinInitialPoolCoinSupply)
			copy(dAtA[i:], x.MinInitialPoolCoinSupply)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MinInitialPoolCoinSupply)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.DustCollectorAddress) > 0 {
			i -= len(x.DustCollectorAddress)
			copy(dAtA[i:], x.DustCollectorAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DustCollectorAddress)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.FeeCollectorAddress) > 0 {
			i -= len(x.FeeCollectorAddress)
			copy(dAtA[i:], x.FeeCollectorAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FeeCollectorAddress)))
			i--
			dAtA[i] = 0x1a
		}
		if x.TickPrecision != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TickPrecision))
			i--
			dAtA[i] = 0x10
		}
		if x.BatchSize != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BatchSize))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BatchSize", wireType)
				}
				x.BatchSize = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BatchSize |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TickPrecision", wireType)
				}
				x.TickPrecision = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TickPrecision |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FeeCollectorAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FeeCollectorAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DustCollectorAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DustCollectorAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinInitialPoolCoinSupply", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MinInitialPoolCoinSupply = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PairCreationFee", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PairCreationFee = append(x.PairCreationFee, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PairCreationFee[len(x.PairCreationFee)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolCreationFee", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PoolCreationFee = append(x.PoolCreationFee, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PoolCreationFee[len(x.PoolCreationFee)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinInitialDepositAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MinInitialDepositAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxPriceLimitRatio", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MaxPriceLimitRatio = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxNumMarketMakingOrderTicks", wireType)
				}
				x.MaxNumMarketMakingOrderTicks = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxNumMarketMakingOrderTicks |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxNumMarketMakingOrdersPerPair", wireType)
				}
				x.MaxNumMarketMakingOrdersPerPair = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxNumMarketMakingOrdersPerPair |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxOrderLifespan", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.MaxOrderLifespan == nil {
					x.MaxOrderLifespan = &durationpb.Duration{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.MaxOrderLifespan); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SwapFeeRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SwapFeeRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WithdrawFeeRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.WithdrawFeeRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 15:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DepositExtraGas", wireType)
				}
				x.DepositExtraGas = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DepositExtraGas |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 16:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WithdrawExtraGas", wireType)
				}
				x.WithdrawExtraGas = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.WithdrawExtraGas |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 17:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OrderExtraGas", wireType)
				}
				x.OrderExtraGas = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.OrderExtraGas |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 18:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxNumActivePoolsPerPair", wireType)
				}
				x.MaxNumActivePoolsPerPair = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxNumActivePoolsPerPair |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: defund/dex/params.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Params defines the parameters for the liquidity module.
type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchSize                       uint32               `protobuf:"varint,1,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	TickPrecision                   uint32               `protobuf:"varint,2,opt,name=tick_precision,json=tickPrecision,proto3" json:"tick_precision,omitempty"`
	FeeCollectorAddress             string               `protobuf:"bytes,3,opt,name=fee_collector_address,json=feeCollectorAddress,proto3" json:"fee_collector_address,omitempty"`
	DustCollectorAddress            string               `protobuf:"bytes,4,opt,name=dust_collector_address,json=dustCollectorAddress,proto3" json:"dust_collector_address,omitempty"`
	MinInitialPoolCoinSupply        string               `protobuf:"bytes,5,opt,name=min_initial_pool_coin_supply,json=minInitialPoolCoinSupply,proto3" json:"min_initial_pool_coin_supply,omitempty"`
	PairCreationFee                 []*v1beta1.Coin      `protobuf:"bytes,6,rep,name=pair_creation_fee,json=pairCreationFee,proto3" json:"pair_creation_fee,omitempty"`
	PoolCreationFee                 []*v1beta1.Coin      `protobuf:"bytes,7,rep,name=pool_creation_fee,json=poolCreationFee,proto3" json:"pool_creation_fee,omitempty"`
	MinInitialDepositAmount         string               `protobuf:"bytes,8,opt,name=min_initial_deposit_amount,json=minInitialDepositAmount,proto3" json:"min_initial_deposit_amount,omitempty"`
	MaxPriceLimitRatio              string               `protobuf:"bytes,9,opt,name=max_price_limit_ratio,json=maxPriceLimitRatio,proto3" json:"max_price_limit_ratio,omitempty"`
	MaxNumMarketMakingOrderTicks    uint32               `protobuf:"varint,10,opt,name=max_num_market_making_order_ticks,json=maxNumMarketMakingOrderTicks,proto3" json:"max_num_market_making_order_ticks,omitempty"`
	MaxNumMarketMakingOrdersPerPair uint32               `protobuf:"varint,11,opt,name=max_num_market_making_orders_per_pair,json=maxNumMarketMakingOrdersPerPair,proto3" json:"max_num_market_making_orders_per_pair,omitempty"`
	MaxOrderLifespan                *durationpb.Duration `protobuf:"bytes,12,opt,name=max_order_lifespan,json=maxOrderLifespan,proto3" json:"max_order_lifespan,omitempty"`
	SwapFeeRate                     string               `protobuf:"bytes,13,opt,name=swap_fee_rate,json=swapFeeRate,proto3" json:"swap_fee_rate,omitempty"`
	WithdrawFeeRate                 string               `protobuf:"bytes,14,opt,name=withdraw_fee_rate,json=withdrawFeeRate,proto3" json:"withdraw_fee_rate,omitempty"`
	DepositExtraGas                 uint64               `protobuf:"varint,15,opt,name=deposit_extra_gas,json=depositExtraGas,proto3" json:"deposit_extra_gas,omitempty"`
	WithdrawExtraGas                uint64               `protobuf:"varint,16,opt,name=withdraw_extra_gas,json=withdrawExtraGas,proto3" json:"withdraw_extra_gas,omitempty"`
	OrderExtraGas                   uint64               `protobuf:"varint,17,opt,name=order_extra_gas,json=orderExtraGas,proto3" json:"order_extra_gas,omitempty"`
	MaxNumActivePoolsPerPair        uint32               `protobuf:"varint,18,opt,name=max_num_active_pools_per_pair,json=maxNumActivePoolsPerPair,proto3" json:"max_num_active_pools_per_pair,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_defund_dex_params_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_defund_dex_params_proto_rawDescGZIP(), []int{0}
}

func (x *Params) GetBatchSize() uint32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *Params) GetTickPrecision() uint32 {
	if x != nil {
		return x.TickPrecision
	}
	return 0
}

func (x *Params) GetFeeCollectorAddress() string {
	if x != nil {
		return x.FeeCollectorAddress
	}
	return ""
}

func (x *Params) GetDustCollectorAddress() string {
	if x != nil {
		return x.DustCollectorAddress
	}
	return ""
}

func (x *Params) GetMinInitialPoolCoinSupply() string {
	if x != nil {
		return x.MinInitialPoolCoinSupply
	}
	return ""
}

func (x *Params) GetPairCreationFee() []*v1beta1.Coin {
	if x != nil {
		return x.PairCreationFee
	}
	return nil
}

func (x *Params) GetPoolCreationFee() []*v1beta1.Coin {
	if x != nil {
		return x.PoolCreationFee
	}
	return nil
}

func (x *Params) GetMinInitialDepositAmount() string {
	if x != nil {
		return x.MinInitialDepositAmount
	}
	return ""
}

func (x *Params) GetMaxPriceLimitRatio() string {
	if x != nil {
		return x.MaxPriceLimitRatio
	}
	return ""
}

func (x *Params) GetMaxNumMarketMakingOrderTicks() uint32 {
	if x != nil {
		return x.MaxNumMarketMakingOrderTicks
	}
	return 0
}

func (x *Params) GetMaxNumMarketMakingOrdersPerPair() uint32 {
	if x != nil {
		return x.MaxNumMarketMakingOrdersPerPair
	}
	return 0
}

func (x *Params) GetMaxOrderLifespan() *durationpb.Duration {
	if x != nil {
		return x.MaxOrderLifespan
	}
	return nil
}

func (x *Params) GetSwapFeeRate() string {
	if x != nil {
		return x.SwapFeeRate
	}
	return ""
}

func (x *Params) GetWithdrawFeeRate() string {
	if x != nil {
		return x.WithdrawFeeRate
	}
	return ""
}

func (x *Params) GetDepositExtraGas() uint64 {
	if x != nil {
		return x.DepositExtraGas
	}
	return 0
}

func (x *Params) GetWithdrawExtraGas() uint64 {
	if x != nil {
		return x.WithdrawExtraGas
	}
	return 0
}

func (x *Params) GetOrderExtraGas() uint64 {
	if x != nil {
		return x.OrderExtraGas
	}
	return 0
}

func (x *Params) GetMaxNumActivePoolsPerPair() uint32 {
	if x != nil {
		return x.MaxNumActivePoolsPerPair
	}
	return 0
}

var File_defund_dex_params_proto protoreflect.FileDescriptor

var file_defund_dex_params_proto_rawDesc = []byte{
	0x0a, 0x17, 0x64, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x2f, 0x64, 0x65, 0x78, 0x2f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x64, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x2e, 0x64, 0x65, 0x78, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69,
	0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2f, 0x6d, 0x73, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f,
	0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x92, 0x0b, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x69, 0x63, 0x6b, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x66, 0x65, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x75, 0x73, 0x74, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x75, 0x73, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5d, 0x0a,
	0x1c, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1d, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49,
	0x6e, 0x74, 0x52, 0x18, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x6f,
	0x6f, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x77, 0x0a, 0x11,
	0x70, 0x61, 0x69, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x73, 0x52, 0x0f, 0x70, 0x61, 0x69, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x77, 0x0a, 0x11, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x30, 0xc8, 0xde, 0x1f,
	0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64,
	0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x0f, 0x70,
	0x6f, 0x6f, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x5a,
	0x0a, 0x1a, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1d, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e,
	0x74, 0x52, 0x17, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x15, 0x6d, 0x61,
	0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xc8, 0xde, 0x1f, 0x00, 0xda,
	0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f,
	0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0x52, 0x12,
	0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x47, 0x0a, 0x21, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x6d,
	0x61, 0x78, 0x4e, 0x75, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x4e, 0x0a, 0x25, 0x6d,
	0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6d, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x69, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x6d, 0x61, 0x78, 0x4e,
	0x75, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4d, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x12, 0x51, 0x0a, 0x12, 0x6d,
	0x61, 0x78, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x70, 0x61,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x10, 0x6d, 0x61,
	0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x66, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x12, 0x47,
	0x0a, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68,
	0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0x52, 0x0b, 0x73, 0x77, 0x61, 0x70,
	0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x23, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x24, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1c, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x47, 0x61, 0x73, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x47, 0x61, 0x73, 0x12, 0x52, 0x0a, 0x12, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x67, 0x61, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x42, 0x24, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1c,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x47, 0x61, 0x73, 0x52, 0x10, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x45, 0x78, 0x74, 0x72, 0x61, 0x47, 0x61, 0x73, 0x12, 0x4c,
	0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x67, 0x61,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x42, 0x24, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f,
	0x1c, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x47, 0x61, 0x73, 0x52, 0x0d, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x45, 0x78, 0x74, 0x72, 0x61, 0x47, 0x61, 0x73, 0x12, 0x3f, 0x0a, 0x1d,
	0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x3a, 0x18, 0x8a,
	0xe7, 0xb0, 0x2a, 0x13, 0x64, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x2f, 0x78, 0x2f, 0x64, 0x65, 0x78,
	0x2f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x83, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e,
	0x64, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x2e, 0x64, 0x65, 0x78, 0x42, 0x0b, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x2f, 0x64, 0x65, 0x78, 0xa2, 0x02, 0x03, 0x44, 0x44, 0x58, 0xaa, 0x02, 0x0a, 0x44,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x2e, 0x44, 0x65, 0x78, 0xca, 0x02, 0x0a, 0x44, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x5c, 0x44, 0x65, 0x78, 0xe2, 0x02, 0x16, 0x44, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5c,
	0x44, 0x65, 0x78, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x0b, 0x44, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x3a, 0x3a, 0x44, 0x65, 0x78, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_defund_dex_params_proto_rawDescOnce sync.Once
	file_defund_dex_params_proto_rawDescData = file_defund_dex_params_proto_rawDesc
)

func file_defund_dex_params_proto_rawDescGZIP() []byte {
	file_defund_dex_params_proto_rawDescOnce.Do(func() {
		file_defund_dex_params_proto_rawDescData = protoimpl.X.CompressGZIP(file_defund_dex_params_proto_rawDescData)
	})
	return file_defund_dex_params_proto_rawDescData
}

var file_defund_dex_params_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_defund_dex_params_proto_goTypes = []interface{}{
	(*Params)(nil),              // 0: defund.dex.Params
	(*v1beta1.Coin)(nil),        // 1: cosmos.base.v1beta1.Coin
	(*durationpb.Duration)(nil), // 2: google.protobuf.Duration
}
var file_defund_dex_params_proto_depIdxs = []int32{
	1, // 0: defund.dex.Params.pair_creation_fee:type_name -> cosmos.base.v1beta1.Coin
	1, // 1: defund.dex.Params.pool_creation_fee:type_name -> cosmos.base.v1beta1.Coin
	2, // 2: defund.dex.Params.max_order_lifespan:type_name -> google.protobuf.Duration
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_defund_dex_params_proto_init() }
func file_defund_dex_params_proto_init() {
	if File_defund_dex_params_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_defund_dex_params_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_defund_dex_params_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_defund_dex_params_proto_goTypes,
		DependencyIndexes: file_defund_dex_params_proto_depIdxs,
		MessageInfos:      file_defund_dex_params_proto_msgTypes,
	}.Build()
	File_defund_dex_params_proto = out.File
	file_defund_dex_params_proto_rawDesc = nil
	file_defund_dex_params_proto_goTypes = nil
	file_defund_dex_params_proto_depIdxs = nil
}
